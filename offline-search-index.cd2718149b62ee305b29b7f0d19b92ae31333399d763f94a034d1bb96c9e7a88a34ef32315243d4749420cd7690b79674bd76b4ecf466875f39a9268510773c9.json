[{"body":"Tab Width The width (number of characters) of an indent. It is used when displaying the tab characters. It is also used in Auto Indent and Replace tabs by spaces.\nAuto Indent  When you start a new line, the new line will have the same indent (i.e. white spaces at the beginning of the line) as the old line. If the old line ends with {, an extra indent (a tab character or Tab Width spaces, depending on whether Replace tabs by spaces is enabled) will be inserted at the beginning of the new line.  Wrap Text If a line is too long to fit in a single line, the line will be separated into several lines.\nAuto Complete Parentheses Automatically add the right parenthesis when you type the left one. For example, when you type (, ) will be added.\nWhen the character next to the cursor is a right parenthesis and you type this parenthesis, instead of typing this parenthesis, the cursor will jump out of the parenthesis.\nYou can choose the parentheses to auto-complete in the Parentheses settings.\nAuto Remove Parentheses When you delete a left parenthesis, if a corresponding right parenthesis is next to it, the right parenthesis will also be deleted.\nYou can choose the parentheses to auto-remove in the Parentheses settings.\nJump out of a parenthesis by pressing Tab When the cursor is next to a right parenthesis, you can use the Tab key to jump out of it. If Auto Complete Parentheses is enabled, this is an alternative of typing the right parenthesis.\nYou can choose the parentheses to jump out by Tab in the Parentheses settings.\nReplace tabs by spaces When you insert an indent, insert spaces instead of a tab character. The number of spaces is equal to the Tab Width.\nNote that this won’t replace the existing tab characters. In Auto Indent, the tab characters in the old line will remain in the new line (however, the new indent inserted after { will be spaces).\n","excerpt":"Tab Width The width (number of characters) of an indent. It is used …","ref":"/docs/preferences/code-edit/","title":"Code Edit"},{"body":"Tab Width The width (number of characters) of an indent. It is used when displaying the tab characters. It is also used in Auto Indent and Replace tabs by spaces.\nAuto Indent  When you start a new line, the new line will have the same indent (i.e. white spaces at the beginning of the line) as the old line. If the old line ends with {, an extra indent (a tab character or Tab Width spaces, depending on whether Replace tabs by spaces is enabled) will be inserted at the beginning of the new line.  Wrap Text If a line is too long to fit in a single line, the line will be separated into several lines.\nAuto Complete Parentheses Automatically add the right parenthesis when you type the left one. For example, when you type (, ) will be added.\nWhen the character next to the cursor is a right parenthesis and you type this parenthesis, instead of typing this parenthesis, the cursor will jump out of the parenthesis.\nYou can choose the parentheses to auto-complete in the Parentheses settings.\nAuto Remove Parentheses When you delete a left parenthesis, if a corresponding right parenthesis is next to it, the right parenthesis will also be deleted.\nYou can choose the parentheses to auto-remove in the Parentheses settings.\nJump out of a parenthesis by pressing Tab When the cursor is next to a right parenthesis, you can use the Tab key to jump out of it. If Auto Complete Parentheses is enabled, this is an alternative of typing the right parenthesis.\nYou can choose the parentheses to jump out by Tab in the Parentheses settings.\nReplace tabs by spaces When you insert an indent, insert spaces instead of a tab character. The number of spaces is equal to the Tab Width.\nNote that this won’t replace the existing tab characters. In Auto Indent, the tab characters in the old line will remain in the new line (however, the new indent inserted after { will be spaces).\n","excerpt":"Tab Width The width (number of characters) of an indent. It is used …","ref":"/ru/docs/preferences/code-edit/","title":"Code Edit"},{"body":"Tab Width The width (number of characters) of an indent. It is used when displaying the tab characters. It is also used in Auto Indent and Replace tabs by spaces.\nAuto Indent  When you start a new line, the new line will have the same indent (i.e. white spaces at the beginning of the line) as the old line. If the old line ends with {, an extra indent (a tab character or Tab Width spaces, depending on whether Replace tabs by spaces is enabled) will be inserted at the beginning of the new line.  Wrap Text If a line is too long to fit in a single line, the line will be separated into several lines.\nAuto Complete Parentheses Automatically add the right parenthesis when you type the left one. For example, when you type (, ) will be added.\nWhen the character next to the cursor is a right parenthesis and you type this parenthesis, instead of typing this parenthesis, the cursor will jump out of the parenthesis.\nYou can choose the parentheses to auto-complete in the Parentheses settings.\nAuto Remove Parentheses When you delete a left parenthesis, if a corresponding right parenthesis is next to it, the right parenthesis will also be deleted.\nYou can choose the parentheses to auto-remove in the Parentheses settings.\nJump out of a parenthesis by pressing Tab When the cursor is next to a right parenthesis, you can use the Tab key to jump out of it. If Auto Complete Parentheses is enabled, this is an alternative of typing the right parenthesis.\nYou can choose the parentheses to jump out by Tab in the Parentheses settings.\nReplace tabs by spaces When you insert an indent, insert spaces instead of a tab character. The number of spaces is equal to the Tab Width.\nNote that this won’t replace the existing tab characters. In Auto Indent, the tab characters in the old line will remain in the new line (however, the new indent inserted after { will be spaces).\n","excerpt":"Tab Width The width (number of characters) of an indent. It is used …","ref":"/zh/docs/preferences/code-edit/","title":"Code Edit"},{"body":"Choose a version in the Releases, then download your binary.\nWindows Setup Version  The setup version needs to be installed on your machine. The setting files will be stored in the config directory on your system, and it will be visible in the list of installed programs on your system.\n Download the setup.exe in the assets and install it.\nPortable Version  The portable version can be executed without installation. The setting files will be stored in the same directory as the executable file, and you won’t see it in the list of installed programs on your system.\n Download the portable.zip in the assets and unzip it to any directory you like.\nMost Linux Distros Download the AppImage in the assets, add execute permission to it (chmod +x \u003cAppImagePath\u003e), then run it.\nDebian-based Linux Distros On Debian-based Linux distributions (Ubuntu, Linux Mint, etc.) you can download .deb package in the assets and run the command in terminal:\nsudo apt install \u003cpath to .deb package\u003e Then type your root password and agree with the installation. You can also use Gdebi or another graphical tools to install deb package. Supported: Debian 10 Buster, Ubuntu 18.04 Bionic Beaver, Linux Mint 19 Tara and newer versions of these distributions or based on them.\nmacOS Download the .dmg file in the assets and install it.\nYou may need to click “Yes” to access Filesystem several times. Apple may report that this application does not comes from recognised developer and prevent you from launching app. Please add an exception to the Editor from Settings -\u003e Security -\u003e General, and allow CP Editor to run anyways\n","excerpt":"Choose a version in the Releases, then download your binary.\nWindows …","ref":"/docs/installation/install-from-binaries/","title":"Install from binaries"},{"body":"Choose a version in the Releases, then download your binary.\nWindows Setup Version  The setup version needs to be installed on your machine. The setting files will be stored in the config directory on your system, and it will be visible in the list of installed programs on your system.\n Download the setup.exe in the assets and install it.\nPortable Version  The portable version can be executed without installation. The setting files will be stored in the same directory as the executable file, and you won’t see it in the list of installed programs on your system.\n Download the portable.zip in the assets and unzip it to any directory you like.\nMost Linux Distros Download the AppImage in the assets, add execute permission to it (chmod +x \u003cAppImagePath\u003e), then run it.\nDebian-based Linux Distros On Debian-based Linux distributions (Ubuntu, Linux Mint, etc.) you can download .deb package in the assets and run the command in terminal:\nsudo apt install \u003cpath to .deb package\u003e Then type your root password and agree with the installation. You can also use Gdebi or another graphical tools to install deb package. Supported: Debian 10 Buster, Ubuntu 18.04 Bionic Beaver, Linux Mint 19 Tara and newer versions of these distributions or based on them.\nmacOS Download the .dmg file in the assets and install it.\nYou may need to click “Yes” to access Filesystem several times. Apple may report that this application does not comes from recognised developer and prevent you from launching app. Please add an exception to the Editor from Settings -\u003e Security -\u003e General, and allow CP Editor to run anyways\n","excerpt":"Choose a version in the Releases, then download your binary.\nWindows …","ref":"/ru/docs/installation/install-from-binaries/","title":"Install from binaries"},{"body":"","excerpt":"","ref":"/docs/installation/","title":"Installation"},{"body":"","excerpt":"","ref":"/ru/docs/installation/","title":"Installation"},{"body":"","excerpt":"","ref":"/zh/docs/installation/","title":"安装"},{"body":"在 Release 页面选择你需要的版本，下载相应的可执行文件。\nWindows 使用安装包安装  使用安装包在你的电脑上进行安装。配置文件将会存储在你的系统的配置目录下，CP Editor 将会出现在你的系统的已安装程序列表中。\n 下载 setup.exe 以进行安装。\n便携式版本  使用便携式版本，无需安装即可使用 CP Editor。这意味着你可以将 CP Editor 存储在 U 盘等可移动介质中。\n配置文件将存储在可执行文件所在的文件夹，CP Editor 将不会出现在你的系统的已安装程序列表中。\n 下载 portable.zip，将其解压到任意一个你想要存放的位置。\n绝大部分 Linux 发行版 下载 AppImage，执行 chmod +x \u003cAppImagePath\u003e 给其添加执行权限，随后运行该文件。\nDebian 系 Linux 发行版 如果你使用的是 Debian 系的 Linux 发行版（Ubuntu，Linux Mint 等），可以下载 .deb 包，并在终端中执行如下命令：\nsudo apt install \u003cpath to .deb package\u003e 接下来输入密码，确认安装。你也可以使用 Gdebi 等图形化工具安装 deb 包，要求系统版本不低于 Debian 10 Buster，Ubuntu 18.04 Bionic Beaver，Linux Mint 19 Tara 或其他基于前述发行版的系统的相应版本。\nmacOS 下载 .dmg 文件然后安装。如果出现“未识别的开发者”等提示消息，请依然允许 CP Editor 运行。可以在 Settings -\u003e Security -\u003e General 中将 CP Editor 添加到白名单里。\n","excerpt":"在 Release 页面选择你需要的版本，下载相应的可执行文件。\nWindows 使用安装包安装  使用安装包在你的电脑上进行安装。配置文件 …","ref":"/zh/docs/installation/install-from-binaries/","title":"安装可执行文件"},{"body":"  Clone this repo and submodules:\ngit clone --recurse-submodules https://github.com/cpeditor/cpeditor.git cd cpeditor   Install Qt (5.15 or higher), CMake (3.12 or higher) and Python3.\n On some Linux distributions and macOS, you can install from your package manager. For example, sudo pacman -S qt5 on Arch Linux, brew install qt5 on macOS. You can also download the offline installer, or download from the mirrors. The path from the root of the mirror should be like /qt/official_releases/qt/5.15/5.15.1/qt-opensource-\u003cplatform\u003e-5.15.1.\u003csuffix\u003e (or other versions). You can also use aqtinstall to install Qt.    If CMake can’t find the Qt installation path, you should set environment variable: CMAKE_PREFIX_PATH=%QtPath%/%QtVersion%/%Compiler%/lib/cmake. For example, on macOS, you can run something like export CMAKE_PREFIX_PATH=\"/usr/local/Cellar/qt/5.15.1\".\n  Run the following commands:\n  Linux/macOS:\nmkdir build cd build cmake .. -DCMAKE_BUILD_TYPE=Release cmake --build .   Windows:\nmkdir build cd build cmake .. cmake --build . --config Release     On Linux, you will get build/cpeditor.\nOn macOS, you will get build/cpeditor.app.\nOn Windows, you will get build\\cpeditor.exe, or build\\Release\\cpeditor.exe. If there are DLLs missing, you can add %QtPath%\\%QtVersion%\\%Compiler%\\bin (for example, D:\\Qt\\5.15.1\\msvc2019_64\\bin) to the PATH environmental variable.\n","excerpt":"  Clone this repo and submodules:\ngit clone --recurse-submodules …","ref":"/docs/installation/build-from-source/","title":"Build from source"},{"body":"  Clone this repo and submodules:\ngit clone --recurse-submodules https://github.com/cpeditor/cpeditor.git cd cpeditor   Install Qt (5.15 or higher), CMake (3.12 or higher) and Python3.\n On some Linux distributions and macOS, you can install from your package manager. For example, sudo pacman -S qt5 on Arch Linux, brew install qt5 on macOS. You can also download the offline installer, or download from the mirrors. The path from the root of the mirror should be like /qt/official_releases/qt/5.15/5.15.1/qt-opensource-\u003cplatform\u003e-5.15.1.\u003csuffix\u003e (or other versions). You can also use aqtinstall to install Qt.    If CMake can’t find the Qt installation path, you should set environment variable: CMAKE_PREFIX_PATH=%QtPath%/%QtVersion%/%Compiler%/lib/cmake. For example, on macOS, you can run something like export CMAKE_PREFIX_PATH=\"/usr/local/Cellar/qt/5.15.1\".\n  Run the following commands:\n  Linux/macOS:\nmkdir build cd build cmake .. -DCMAKE_BUILD_TYPE=Release cmake --build .   Windows:\nmkdir build cd build cmake .. cmake --build . --config Release     On Linux, you will get build/cpeditor.\nOn macOS, you will get build/cpeditor.app.\nOn Windows, you will get build\\cpeditor.exe, or build\\Release\\cpeditor.exe. If there are DLLs missing, you can add %QtPath%\\%QtVersion%\\%Compiler%\\bin (for example, D:\\Qt\\5.15.1\\msvc2019_64\\bin) to the PATH environmental variable.\n","excerpt":"  Clone this repo and submodules:\ngit clone --recurse-submodules …","ref":"/ru/docs/installation/build-from-source/","title":"Build from source"},{"body":"","excerpt":"","ref":"/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"/ru/docs/","title":"Documentation"},{"body":"General Default Language The default programming language. It’s used when opening a new tab and some other places.\nCommands C++ Commands C++ Compile Command The compilation command for C++. For example: g++ -Wall.\nThe command shouldn’t contain the source file and the output file, CP Editor automatically adds them.\nFor compilation flags, please refer to the manual of the compiler. For example, you may want to add -std=c++14 in the compile command to use C++14.\nC++ Executable File Path The path of the executable file, i.e. the argument of the -o option of the compiler.\nIf this path is a relative path, then it’s relative to the source file (if it’s an untitled tab, then relative to the Temporary Directory).\nYou can use some place holders for this setting:\n ${filename}: The complete name of the source file. If it’s an untitled tab (i.e. an unsaved file), the complete file name is sol.cpp. ${basename}: ${filename} without the suffix (i.e. without .cpp, etc.). ${tmpdir} or ${tempdir}: The path of the Temporary Directory.  For example, you can use ${tmpdir}/${basename} if you don’t want to keep the executable files, or executables/${basename} if you want to keep all executable files in the executables directory in the parent directory of the source file.\nC++ Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nC++ Compiler Output Codec The text codec of the compiler output (warnings, errors, etc.), used to display the messages from the compiler in CP Editor.\nIt could be useful if you are using locales for your compiler and the compiler messages are not English.\nJava Commands Java Compile Command The compilation command for Java. For example: javac.\nThe command shouldn’t contain the source file and the class path, CP Editor automatically adds them.\nJava Class Path The path to save the class files.\nPlease refer to C++ Executable File Path for the details.\nJava Class Name The name of the main class of your solution.\nYou can use arbitary name for your source file. When compiling, CP Editor automatically saves your code to a file with the class name.\nJava Run Command The command to run your solution. For example: java.\nThis command shouldn’t contain the class path or the class name, CP Editor automatically adds them.\nJava Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nJava Compiler Output Codec Please refer to C++ Compiler Output Codec.\nPython Commands Python Run Command The command to run a python code. It’s usually one of python/python2/python3.\nPython Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nTemplate The code template is a file. When opening a new tab, the content of the template will be the initial content in the code editor.\nTemplate Path The path to the code template.\nTemplate Cursor Position The initial position of the text cursor when opening the template.\nIt contains three parts:\n Regex Offset type: start or end. Offset characters: a number, could be negative.  It works as below:\n Find the first match of the regex in the template. If nothing matches the regex, the cursor will be at the end of the template. Otherwise, depending on the offset type, the cursor will be at the start/end of the first match, and then moved to the right by the number of the offset characters.  For example, if your template contains the following snippet:\nint main() { } Then you can use int main as the regex, end as the offset type, and 9 as the offset characters. After that, when opening a new tab, the cursor will be at the first line in the main function.\nSnippets Manage Snippets You can add/delete/rename snippets in “Language-\u003eXXX-\u003eXXX Snippet”. You can use Ctrl+N for “Add”, Ctrl+W for “Del” and F2 for “Rename”.\nYou can also import snippets from files or extract your snippets to files in the “More” menu in the snippet page.\nUse Snippets You can insert a snippet into the code editor by either clicking “Actions-\u003eUse Snippets” or pressing Ctrl+T.\nWhen choosing a snippet, you can enter the first few characters of the snippet name, and it will be auto-completed.\nParentheses You can set the parentheses settings for each language and each parenthesis.\nEach setting has three states: enable, disable and default. If it’s default, it uses the settings in the Code Edit page. Otherwise, it overwrites the settings in the Code Edit page.\nAuto Complete See Code Edit/Auto Complete Parentheses.\nAuto Remove See Code Edit/Auto Remove Parentheses.\nTab Jump Out See Code Edit/Jump out of a parenthesis by pressing Tab.\n","excerpt":"General Default Language The default programming language. It’s used …","ref":"/docs/preferences/language/","title":"Language"},{"body":"General Default Language The default programming language. It’s used when opening a new tab and some other places.\nCommands C++ Commands C++ Compile Command The compilation command for C++. For example: g++ -Wall.\nThe command shouldn’t contain the source file and the output file, CP Editor automatically adds them.\nFor compilation flags, please refer to the manual of the compiler. For example, you may want to add -std=c++14 in the compile command to use C++14.\nC++ Executable File Path The path of the executable file, i.e. the argument of the -o option of the compiler.\nIf this path is a relative path, then it’s relative to the source file (if it’s an untitled tab, then relative to the Temporary Directory).\nYou can use some place holders for this setting:\n ${filename}: The complete name of the source file. If it’s an untitled tab (i.e. an unsaved file), the complete file name is sol.cpp. ${basename}: ${filename} without the suffix (i.e. without .cpp, etc.). ${tmpdir} or ${tempdir}: The path of the Temporary Directory.  For example, you can use ${tmpdir}/${basename} if you don’t want to keep the executable files, or executables/${basename} if you want to keep all executable files in the executables directory in the parent directory of the source file.\nC++ Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nC++ Compiler Output Codec The text codec of the compiler output (warnings, errors, etc.), used to display the messages from the compiler in CP Editor.\nIt could be useful if you are using locales for your compiler and the compiler messages are not English.\nJava Commands Java Compile Command The compilation command for Java. For example: javac.\nThe command shouldn’t contain the source file and the class path, CP Editor automatically adds them.\nJava Class Path The path to save the class files.\nPlease refer to C++ Executable File Path for the details.\nJava Class Name The name of the main class of your solution.\nYou can use arbitary name for your source file. When compiling, CP Editor automatically saves your code to a file with the class name.\nJava Run Command The command to run your solution. For example: java.\nThis command shouldn’t contain the class path or the class name, CP Editor automatically adds them.\nJava Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nJava Compiler Output Codec Please refer to C++ Compiler Output Codec.\nPython Commands Python Run Command The command to run a python code. It’s usually one of python/python2/python3.\nPython Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nTemplate The code template is a file. When opening a new tab, the content of the template will be the initial content in the code editor.\nTemplate Path The path to the code template.\nTemplate Cursor Position The initial position of the text cursor when opening the template.\nIt contains three parts:\n Regex Offset type: start or end. Offset characters: a number, could be negative.  It works as below:\n Find the first match of the regex in the template. If nothing matches the regex, the cursor will be at the end of the template. Otherwise, depending on the offset type, the cursor will be at the start/end of the first match, and then moved to the right by the number of the offset characters.  For example, if your template contains the following snippet:\nint main() { } Then you can use int main as the regex, end as the offset type, and 9 as the offset characters. After that, when opening a new tab, the cursor will be at the first line in the main function.\nSnippets Manage Snippets You can add/delete/rename snippets in “Language-\u003eXXX-\u003eXXX Snippet”. You can use Ctrl+N for “Add”, Ctrl+W for “Del” and F2 for “Rename”.\nYou can also import snippets from files or extract your snippets to files in the “More” menu in the snippet page.\nUse Snippets You can insert a snippet into the code editor by either clicking “Actions-\u003eUse Snippets” or pressing Ctrl+T.\nWhen choosing a snippet, you can enter the first few characters of the snippet name, and it will be auto-completed.\nParentheses You can set the parentheses settings for each language and each parenthesis.\nEach setting has three states: enable, disable and default. If it’s default, it uses the settings in the Code Edit page. Otherwise, it overwrites the settings in the Code Edit page.\nAuto Complete See Code Edit/Auto Complete Parentheses.\nAuto Remove See Code Edit/Auto Remove Parentheses.\nTab Jump Out See Code Edit/Jump out of a parenthesis by pressing Tab.\n","excerpt":"General Default Language The default programming language. It’s used …","ref":"/ru/docs/preferences/language/","title":"Language"},{"body":"General Default Language The default programming language. It’s used when opening a new tab and some other places.\nCommands C++ Commands C++ Compile Command The compilation command for C++. For example: g++ -Wall.\nThe command shouldn’t contain the source file and the output file, CP Editor automatically adds them.\nFor compilation flags, please refer to the manual of the compiler. For example, you may want to add -std=c++14 in the compile command to use C++14.\nC++ Executable File Path The path of the executable file, i.e. the argument of the -o option of the compiler.\nIf this path is a relative path, then it’s relative to the source file (if it’s an untitled tab, then relative to the Temporary Directory).\nYou can use some place holders for this setting:\n ${filename}: The complete name of the source file. If it’s an untitled tab (i.e. an unsaved file), the complete file name is sol.cpp. ${basename}: ${filename} without the suffix (i.e. without .cpp, etc.). ${tmpdir} or ${tempdir}: The path of the Temporary Directory.  For example, you can use ${tmpdir}/${basename} if you don’t want to keep the executable files, or executables/${basename} if you want to keep all executable files in the executables directory in the parent directory of the source file.\nC++ Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nC++ Compiler Output Codec The text codec of the compiler output (warnings, errors, etc.), used to display the messages from the compiler in CP Editor.\nIt could be useful if you are using locales for your compiler and the compiler messages are not English.\nJava Commands Java Compile Command The compilation command for Java. For example: javac.\nThe command shouldn’t contain the source file and the class path, CP Editor automatically adds them.\nJava Class Path The path to save the class files.\nPlease refer to C++ Executable File Path for the details.\nJava Class Name The name of the main class of your solution.\nYou can use arbitary name for your source file. When compiling, CP Editor automatically saves your code to a file with the class name.\nJava Run Command The command to run your solution. For example: java.\nThis command shouldn’t contain the class path or the class name, CP Editor automatically adds them.\nJava Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nJava Compiler Output Codec Please refer to C++ Compiler Output Codec.\nPython Commands Python Run Command The command to run a python code. It’s usually one of python/python2/python3.\nPython Run Arguments The arguments passed to the program when executing it. It’s usually not needed in competitive programming.\nTemplate The code template is a file. When opening a new tab, the content of the template will be the initial content in the code editor.\nTemplate Path The path to the code template.\nTemplate Cursor Position The initial position of the text cursor when opening the template.\nIt contains three parts:\n Regex Offset type: start or end. Offset characters: a number, could be negative.  It works as below:\n Find the first match of the regex in the template. If nothing matches the regex, the cursor will be at the end of the template. Otherwise, depending on the offset type, the cursor will be at the start/end of the first match, and then moved to the right by the number of the offset characters.  For example, if your template contains the following snippet:\nint main() { } Then you can use int main as the regex, end as the offset type, and 9 as the offset characters. After that, when opening a new tab, the cursor will be at the first line in the main function.\nSnippets Manage Snippets You can add/delete/rename snippets in “Language-\u003eXXX-\u003eXXX Snippet”. You can use Ctrl+N for “Add”, Ctrl+W for “Del” and F2 for “Rename”.\nYou can also import snippets from files or extract your snippets to files in the “More” menu in the snippet page.\nUse Snippets You can insert a snippet into the code editor by either clicking “Actions-\u003eUse Snippets” or pressing Ctrl+T.\nWhen choosing a snippet, you can enter the first few characters of the snippet name, and it will be auto-completed.\nParentheses You can set the parentheses settings for each language and each parenthesis.\nEach setting has three states: enable, disable and default. If it’s default, it uses the settings in the Code Edit page. Otherwise, it overwrites the settings in the Code Edit page.\nAuto Complete See Code Edit/Auto Complete Parentheses.\nAuto Remove See Code Edit/Auto Remove Parentheses.\nTab Jump Out See Code Edit/Jump out of a parenthesis by pressing Tab.\n","excerpt":"General Default Language The default programming language. It’s used …","ref":"/zh/docs/preferences/language/","title":"Language"},{"body":"  克隆源代码仓库以及子组件：\ngit clone --recurse-submodules https://github.com/cpeditor/cpeditor.git cd cpeditor   安装 Qt（5.15 或更高版本）, CMake（3.12 或更高版本）以及 Python3。\n 在一些 Linux 发行版和 macOS 系统上，你可以直接使用包管理器安装 Qt。例如，在 Arch Linux 上可以使用 sudo pacman -S qt5-base，在 macOS 上可以使用 brew install qt5。 你还可以使用 aqtinstall 来下载并安装。    如果 CMake 提示找不到 Qt 路径，你应该设置环境变量：CMAKE_PREFIX_PATH=%QtPath%/%QtVersion%/%Compiler%/lib/cmake。例如，在 macOS 上，你可以运行 export CMAKE_PREFIX_PATH=\"/usr/local/Cellar/qt/5.15.1\"。\n  执行如下命令完成构建过程。\n  Linux/macOS:\nmkdir build cd build cmake .. -DCMAKE_BUILD_TYPE=Release cmake --build .   Windows:\nmkdir build cd build cmake .. cmake --build . --config Release     在 Linux 上，你会得到 build/cpeditor。\n在 macOS 上，你会得到 build/cpeditor.app。\n在 Windows 上，你会得到 build/cpeditor.exe 或 build/Release/cpeditor.exe。如果打开时提示 DLL 缺失，你可以将 %QtPath%\\%QtVersion%\\%Compiler%\\bin（例如：D:\\Qt\\5.15.1\\msvc2019_64\\bin）加入 PATH 环境变量。\n","excerpt":"  克隆源代码仓库以及子组件：\ngit clone --recurse-submodules …","ref":"/zh/docs/installation/build-from-source/","title":"从源代码构建"},{"body":"","excerpt":"","ref":"/zh/docs/","title":"文档"},{"body":"General This section contains general appearance settings such as themes and styles.\nUI Language The natural language used in the UI.\nUI Style The style used for the UI. The available options are different on different platforms.\nThe “default” style is either the most appropriate style on your platform, or the style specified by the --style command line option.\nOn Windows, there’s an extra option “Auto Fusion”. “Auto Fusion” is either dark or light depending on the system theme (i.e. whether the Windows application theme is dark or light).\nIf there’s anything wrong after you change the UI style, you can try restarting CP Editor.\nEditor Theme The syntax highlighting theme for the code editor.\nOpacity The opacity of the main window.\nTest Case Maximum Height The maximum height of a test case before the scrollbar occurs.\nShow Compile And Run Only Hide the compile only and run only buttons.\nIt is useful if you don’t care about the time used on compilation, or you are using Python which doesn’t need to be compiled.\nDisplay EOLN in Diff Use “¶” to visualize the end-of-line in the diff viewer. It is useful if you want to see differences of the end-of-line (i.e. extra empty lines at the end).\nAdd extra margin at the bottom of the code editor Add an extra margin at the bottom of the code editor, so that you can scroll less.\nDue to technical reasons, it could slightly affect the operation history, i.e. you might be able undo the margin change by Ctrl+Z.\nFont This section allows you to set fonts for different UI components of the Editor.\nShow only Monospaced Font When checked the font picker dialog shows only monospaced fonts.\nEditor Font The font for the code editor.\nTest Cases Font The font for the test cases.\nMessage Logger Font The font for the messages.\nCustom Application Font Use a custom font for the UI (except for code editor, test cases, messages, etc.), instead of the system font.\n","excerpt":"General This section contains general appearance settings such as …","ref":"/docs/preferences/appearance/","title":"Appearance"},{"body":"General This section contains general appearance settings such as themes and styles.\nUI Language The natural language used in the UI.\nUI Style The style used for the UI. The available options are different on different platforms.\nThe “default” style is either the most appropriate style on your platform, or the style specified by the --style command line option.\nOn Windows, there’s an extra option “Auto Fusion”. “Auto Fusion” is either dark or light depending on the system theme (i.e. whether the Windows application theme is dark or light).\nIf there’s anything wrong after you change the UI style, you can try restarting CP Editor.\nEditor Theme The syntax highlighting theme for the code editor.\nOpacity The opacity of the main window.\nTest Case Maximum Height The maximum height of a test case before the scrollbar occurs.\nShow Compile And Run Only Hide the compile only and run only buttons.\nIt is useful if you don’t care about the time used on compilation, or you are using Python which doesn’t need to be compiled.\nDisplay EOLN in Diff Use “¶” to visualize the end-of-line in the diff viewer. It is useful if you want to see differences of the end-of-line (i.e. extra empty lines at the end).\nAdd extra margin at the bottom of the code editor Add an extra margin at the bottom of the code editor, so that you can scroll less.\nDue to technical reasons, it could slightly affect the operation history, i.e. you might be able undo the margin change by Ctrl+Z.\nFont This section allows you to set fonts for different UI components of the Editor.\nShow only Monospaced Font When checked the font picker dialog shows only monospaced fonts.\nEditor Font The font for the code editor.\nTest Cases Font The font for the test cases.\nMessage Logger Font The font for the messages.\nCustom Application Font Use a custom font for the UI (except for code editor, test cases, messages, etc.), instead of the system font.\n","excerpt":"General This section contains general appearance settings such as …","ref":"/ru/docs/preferences/appearance/","title":"Appearance"},{"body":"Change UI Language Now CP Editor is available in multiple languages, including English and Chinese.\nYou can change the UI language in Preferences-\u003eAppearance. Note that you need to restart the editor to apply the change.\nSet Compile and Run Commands You need to install g++ / python / java depending on which language you are using. You need to add them to system PATH to have them found by the editor.\nThen you can set the Compile and Run Commands in the preferences. For example, you can set C++ Commands in Preferences-\u003eLanguages-\u003eC++-\u003eC++ Commands.\nSetup CF Tool In order to submit Codeforces problems in CP Editor, you need to install CF Tool.\nYou can add it to your system PATH to use it directly, or you can set the path to it in Preferences-\u003eExtensions-\u003eCF Tool.\nYou need to configure the tool by running the command cf config in the command line before using it.\nSetup Competitive Companion Competitive Companion is used to parse problems/contests from online judges. After you install it, you can parse sample test cases by a single click, instead of copying them manually.\nYou can install it from the addon/extension markets:\n Chrome Extension Firefox Addon  Setup Clang Format The editor uses Clang Format to format your C++ code.\nYou need to add it to your system PATH, or set the path to it at Preferences-\u003eExtensions-\u003eClang Format.\nSetup Language Server You can use Language Server to lint your codes and get errors, warnings, etc.\nYou can install any language server program and set suitable settings in Preferences-\u003eExtensions-\u003eLanguage Server.\nThough you can use any language server program you like, here are some suggestions if you are not sure which to use.\nC++ Server If you have installed LLVM, you already have clangd, because it comes with the clang compiler. If you haven’t, please install LLVM prebuild binaries for Windows. On Linux and macOS you can install it from your package manager. You need to set the start command of clangd in Preferences -\u003e Extensions -\u003e Language Server -\u003e C++ Server -\u003e Path, where the command can be the path to the executable file or just clangd if it’s in the PATH.\nJava Server You need to have java installed and added to PATH. Download Eclipse.JDT.ls, extract it to any location (in a new directory), We call the path to that directory \u003cINSTALL_PATH\u003e (Something like C://Users/Myname/Desktop/EclipseJDT.ls/). In CP Editor, go to Preferences -\u003e Extensions -\u003e Language Server -\u003e Java Server. Set “Path” to java and set “Arguments” to something like -jar $INSTALL_PATH/plugins/org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar -configuration \u003cINSTALL_PATH\u003e/config_(linux|win|mac). For example, on Windows, the arguments should be something like -configuration C://Users/Myname/Desktop/Eclipse.JDT.ls/config_win.\nThe full name of the jar file above, org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar, may change incrementally as the project version of JDT changes. If java complains about “jar not found”, then look for the latest version of the org.eclipse.equinox.launcher_* jar in \u003cINSTALL_PATH\u003e/plugins and replace it in the command after -jar.\nPython Server You need to have python and pip installed and added to PATH. Install python-language-server pip module by running pip install 'python-language-server[all]'. After the installation is done, open CP Editor settings, go to Preferences -\u003e Extensions -\u003e Language Server -\u003e Python Server. Set “Path” to python and set “Arguments” to -m pyls. Save the changes and you will have linting for Python.\n","excerpt":"Change UI Language Now CP Editor is available in multiple languages, …","ref":"/docs/setup/","title":"Setup"},{"body":"Change UI Language Now CP Editor is available in multiple languages, including English and Chinese.\nYou can change the UI language in Preferences-\u003eAppearance. Note that you need to restart the editor to apply the change.\nSet Compile and Run Commands You need to install g++ / python / java depending on which language you are using. You need to add them to system PATH to have them found by the editor.\nThen you can set the Compile and Run Commands in the preferences. For example, you can set C++ Commands in Preferences-\u003eLanguages-\u003eC++-\u003eC++ Commands.\nSetup CF Tool In order to submit Codeforces problems in CP Editor, you need to install CF Tool.\nYou can add it to your system PATH to use it directly, or you can set the path to it in Preferences-\u003eExtensions-\u003eCF Tool.\nYou need to configure the tool by running the command cf config in the command line before using it.\nSetup Competitive Companion Competitive Companion is used to parse problems/contests from online judges. After you install it, you can parse sample test cases by a single click, instead of copying them manually.\nYou can install it from the addon/extension markets:\n Chrome Extension Firefox Addon  Setup Clang Format The editor uses Clang Format to format your C++ code.\nYou need to add it to your system PATH, or set the path to it at Preferences-\u003eExtensions-\u003eClang Format.\nSetup Language Server You can use Language Server to lint your codes and get errors, warnings, etc.\nYou can install any language server program and set suitable settings in Preferences-\u003eExtensions-\u003eLanguage Server.\nThough you can use any language server program you like, here are some suggestions if you are not sure which to use.\nC++ Server If you have installed LLVM, you already have clangd, because it comes with the clang compiler. If you haven’t, please install LLVM prebuild binaries for Windows. On Linux and macOS you can install it from your package manager. You need to set the start command of clangd in Preferences -\u003e Extensions -\u003e Language Server -\u003e C++ Server -\u003e Path, where the command can be the path to the executable file or just clangd if it’s in the PATH.\nJava Server You need to have java installed and added to PATH. Download Eclipse.JDT.ls, extract it to any location (in a new directory), We call the path to that directory \u003cINSTALL_PATH\u003e (Something like C://Users/Myname/Desktop/EclipseJDT.ls/). In CP Editor, go to Preferences -\u003e Extensions -\u003e Language Server -\u003e Java Server. Set “Path” to java and set “Arguments” to something like -jar $INSTALL_PATH/plugins/org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar -configuration \u003cINSTALL_PATH\u003e/config_(linux|win|mac). For example, on Windows, the arguments should be something like -configuration C://Users/Myname/Desktop/Eclipse.JDT.ls/config_win.\nThe full name of the jar file above, org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar, may change incrementally as the project version of JDT changes. If java complains about “jar not found”, then look for the latest version of the org.eclipse.equinox.launcher_* jar in \u003cINSTALL_PATH\u003e/plugins and replace it in the command after -jar.\nPython Server You need to have python and pip installed and added to PATH. Install python-language-server pip module by running pip install 'python-language-server[all]'. After the installation is done, open CP Editor settings, go to Preferences -\u003e Extensions -\u003e Language Server -\u003e Python Server. Set “Path” to python and set “Arguments” to -m pyls. Save the changes and you will have linting for Python.\n","excerpt":"Change UI Language Now CP Editor is available in multiple languages, …","ref":"/ru/docs/setup/","title":"Setup"},{"body":"Change UI Language Now CP Editor is available in multiple languages, including English and Chinese.\nYou can change the UI language in Preferences-\u003eAppearance. Note that you need to restart the editor to apply the change.\nSet Compile and Run Commands You need to install g++ / python / java depending on which language you are using. You need to add them to system PATH to have them found by the editor.\nThen you can set the Compile and Run Commands in the preferences. For example, you can set C++ Commands in Preferences-\u003eLanguages-\u003eC++-\u003eC++ Commands.\nSetup CF Tool In order to submit Codeforces problems in CP Editor, you need to install CF Tool.\nYou can add it to your system PATH to use it directly, or you can set the path to it in Preferences-\u003eExtensions-\u003eCF Tool.\nYou need to configure the tool by running the command cf config in the command line before using it.\nSetup Competitive Companion Competitive Companion is used to parse problems/contests from online judges. After you install it, you can parse sample test cases by a single click, instead of copying them manually.\nYou can install it from the addon/extension markets:\n Chrome Extension Firefox Addon  Setup Clang Format The editor uses Clang Format to format your C++ code.\nYou need to add it to your system PATH, or set the path to it at Preferences-\u003eExtensions-\u003eClang Format.\nSetup Language Server You can use Language Server to lint your codes and get errors, warnings, etc.\nYou can install any language server program and set suitable settings in Preferences-\u003eExtensions-\u003eLanguage Server.\nThough you can use any language server program you like, here are some suggestions if you are not sure which to use.\nC++ Server If you have installed LLVM, you already have clangd, because it comes with the clang compiler. If you haven’t, please install LLVM prebuild binaries for Windows. On Linux and macOS you can install it from your package manager. You need to set the start command of clangd in Preferences -\u003e Extensions -\u003e Language Server -\u003e C++ Server -\u003e Path, where the command can be the path to the executable file or just clangd if it’s in the PATH.\nJava Server You need to have java installed and added to PATH. Download Eclipse.JDT.ls, extract it to any location (in a new directory), We call the path to that directory \u003cINSTALL_PATH\u003e (Something like C://Users/Myname/Desktop/EclipseJDT.ls/). In CP Editor, go to Preferences -\u003e Extensions -\u003e Language Server -\u003e Java Server. Set “Path” to java and set “Arguments” to something like -jar $INSTALL_PATH/plugins/org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar -configuration \u003cINSTALL_PATH\u003e/config_(linux|win|mac). For example, on Windows, the arguments should be something like -configuration C://Users/Myname/Desktop/Eclipse.JDT.ls/config_win.\nThe full name of the jar file above, org.eclipse.equinox.launcher_1.5.200.v20180922-1751.jar, may change incrementally as the project version of JDT changes. If java complains about “jar not found”, then look for the latest version of the org.eclipse.equinox.launcher_* jar in \u003cINSTALL_PATH\u003e/plugins and replace it in the command after -jar.\nPython Server You need to have python and pip installed and added to PATH. Install python-language-server pip module by running pip install 'python-language-server[all]'. After the installation is done, open CP Editor settings, go to Preferences -\u003e Extensions -\u003e Language Server -\u003e Python Server. Set “Path” to python and set “Arguments” to -m pyls. Save the changes and you will have linting for Python.\n","excerpt":"Change UI Language Now CP Editor is available in multiple languages, …","ref":"/zh/docs/setup/","title":"Setup"},{"body":"If you want to use the latest version (even later than the beta release), but don’t want to build from source, you can download Artifacts from GitHub Actions.\nHowever, it’s not recommended to use Artifacts, they are more unstable than beta releases, and may be a work in progress. You should read the commit logs and even the source codes before using Artifacts.\nIn order to run it on Windows/macOS, you should install from Releases first (usually any version is OK, unless something like DLL missing happens). On Windows, replace cpeditor.exe in your install folder with the Artifact. On macOS, run cp path/to/Artifact cpeditor.app/Contents/MacOs, where cpeditor.app is the one already installed on your machine.\nIn order to run it on Ubuntu 18.04, you need to install Qt. Other Linux distributions may not support binaries compiled on Ubuntu 18.04.\n","excerpt":"If you want to use the latest version (even later than the beta …","ref":"/docs/installation/use-artifacts/","title":"Use Artifacts"},{"body":"If you want to use the latest version (even later than the beta release), but don’t want to build from source, you can download Artifacts from GitHub Actions.\nHowever, it’s not recommended to use Artifacts, they are more unstable than beta releases, and may be a work in progress. You should read the commit logs and even the source codes before using Artifacts.\nIn order to run it on Windows/macOS, you should install from Releases first (usually any version is OK, unless something like DLL missing happens). On Windows, replace cpeditor.exe in your install folder with the Artifact. On macOS, run cp path/to/Artifact cpeditor.app/Contents/MacOs, where cpeditor.app is the one already installed on your machine.\nIn order to run it on Ubuntu 18.04, you need to install Qt. Other Linux distributions may not support binaries compiled on Ubuntu 18.04.\n","excerpt":"If you want to use the latest version (even later than the beta …","ref":"/ru/docs/installation/use-artifacts/","title":"Use Artifacts"},{"body":"如果你想要使用最新版本（比 beta 还要新），但是不想从源代码构建，你可以从 GitHub Actions 下载 Artifacts。\n然而，我们不建议你使用 Artifacts，因为它们比 beta 版本更加不稳定，可能正在开发中。在使用 Artifacts 之前，你应该阅读 commit 日志甚至源代码。\n为了在 Windows/macOS 上运行它，你应该首先从 Releases 安装（通常任何版本都可以，除非出现了 DLL 丢失等问题）。在 Windows 上，将安装文件夹中的 cpeditor.exe 替换为 Artifact 版本的。在 macOS 上，运行 cp path/to/Artifact cpeditor.app/Contents/MacOs，其中 cpeditor.app 是你的计算机上已安装的那个。\n为了在 Ubuntu 18.04 上运行它，你需要安装 Qt。其他 Linux 发行版可能不支持在 Ubuntu 18.04 上编译的二进制文件。\n","excerpt":"如果你想要使用最新版本（比 beta 还要新），但是不想从源代码构建，你可以从 GitHub Actions 下载 Artifacts。\n然 …","ref":"/zh/docs/installation/use-artifacts/","title":"使用 Artifacts"},{"body":"通用 界面语言 (UI Language) UI 中使用的自然语言。\n界面风格 用户界面使用的样式。可用选项在不同平台上有所不同。\n“默认”样式要么是在你的平台上最合适的样式，要么是 --style 命令行选项指定的样式。\n在 Windows 上，还有一个附加选项 “Auto Fusion”。“Auto Fusion” 是深色还是浅色取决于系统主题（即 Windows 应用程序主题是深色还是浅色）。\n更改 UI 样式后，如果有任何问题，可以尝试重新启动 CP Editor。\n编辑器主题 代码编辑器的语法高亮显示主题。\n不透明度 主窗口的不透明度。\n测试用例最大高度 滚动条出现之前测试用例的最大高度。\n只显示编译并运行 隐藏仅编译、仅运行这两个按钮。\n如果你不在乎编译所用的时间，或者你正在使用不需要编译的 Python，这将非常有用。\n在差异查看器中显示行尾字符 使用字符 “¶” 在差异查看器中可视化行尾。如果你要查看行尾的差异（即末尾多余的空行），这将很有用。\n在代码编辑器底部添加额外的边距 在代码编辑器的底部添加一个额外的边距，让你可以更少地滚动。\n由于技术原因，它可能会稍微影响操作历史记录，所以你可以通过 Ctrl+Z 撤消页边距更改。\n字体 仅显示等宽字体 在为下面的设置选择字体时只显示等宽字体。\n编辑器字体 代码编辑器的字体。\n测试用例字体 测试用例的字体。\n消息字体 消息的字体。\n使用自定义的全局字体 对 UI 用自定义字体（代码编辑器，测试用例，消息等除外）来替代系统字体。\n","excerpt":"通用 界面语言 (UI Language) UI 中使用的自然语言。\n界面风格 用户界面使用的样式。可用选项在不同平台上有所不同。\n“默认” …","ref":"/zh/docs/preferences/appearance/","title":"外观"},{"body":"Save Save Files Faster Use QFile instead of QSaveFile to save files.\nThis is slightly unsafer but notably faster.\nSave File On Compilation Save your code when compiling it.\nSave File On Execution Save your code when executing it.\nSave Testcases on Save Save the test cases on the disk when saving the code.\nYou can choose where to save the test cases in File Path/Testcases.\nAuto Save Auto Save Interval Type It is easier to describe if we explain a little bit about the internal implementation: There is a countdown timer. When we “reset” it, it will be “running” in the next Auto Save Interval milliseconds, and after Auto Save Interval milliseconds, the timer will “timeout” and the code is auto-saved.\nAfter the last modification The timer is reset every time when you modify the code. i.e. Your codes will be saved if you haven’t modified it for Auto Save Interval milliseconds.\nThis mode is suitable for a small Auto Save Interval, so that your codes will be auto-saved every time you take a short break from typing. If the interval is too long, it’s likely that your codes will never be auto-saved.\nAfter the first modification The timer is reset when you modify the code if the timer is not running. i.e. Your codes will be saved if you modified it Auto Save Interval milliseconds ago.\nThis mode is suitable for a long Auto Save Interval, otherwise it’s likely that the save happens when you are typing, which could affect your typing experience.\nWithout modification The timer is reset every time when it timeouts. i.e. Your codes will be saved every Auto Save Interval milliseconds, no matter you have modified it or not.\nThis mode is suitable for saving test cases, etc. In the other modes, the test cases are not auto-saved if you don’t modify the codes.\nDetached Execution Terminal Program \u0026 Terminal Arguments This setting is only available on Linux.\nThe terminal program is the name/path of the terminal emulator you want to use.\nThe arguments are used to execute a given command. i.e. \u003cTerminal Program\u003e \u003cTerminal Arguments\u003e \u003ccommand\u003e can be used to execute \u003ccommand\u003e in the terminal emulator.\nIn most terminal emulators including konsole, xterm and xfce-terminal, the argument is -e.\nIn gnome-terminal, it is --.\nYou can read the manual of your terminal emulator to get the suitable arguments.\nSave Session Restore last session at startup Save the status of the editor, and restore most status from the last session when you start CP Editor.\nYou can use the --no-hot-exit command line option to temporarily disable this, in case that the last session is too big and the application hangs.\nAuto-save the current session periodically Save the current session periodically instead of only when exiting the application.\nThis is useful if you don’t want to lose your codes after abnormal terminations, such as power outage, forced shutdown, killing CP Editor, etc. However, if the files and test cases are too large, the editor hangs each time the auto-save happens.\nBind file and problem Restore the problem URL when opening a file If a problem URL was set for a file, when you open that file again, the problem URL will be restored.\nOpen the old file when parsing an old problem URL If a problem URL was set for a file, when parsing that problem from Competitive Companion again, the old file will be opened.\nEmpty Test Cases Run your codes on empty test cases Run your code on all non-hidden test cases even if the input is empty.\nCheck your answer on test cases with empty output Check your answer even if your output or the expected output is empty.\nLoad External File Changes Auto-load external file changes if there’s no unsaved modification If the file on the disk and the code in CP Editor was the same, and then the file is changed outside of CP Editor, load the external change without confirmation.\nAsk whether to load external file changes If the file is changed outside of CP Editor, ask whether to load the change or not.\nIf this setting is disabled, external changes won’t be loaded.\nAuto-load external file changes if there’s no unsaved modification overrides this setting. i.e. if Auto-load external file changes if there’s no unsaved modification is enabled, external file changes will be loaded without confrimation regardless of Ask whether to load external file changes ; if Auto-load external file changes if there’s no unsaved modification is disabled, the user will be asked whether to load the changes only when Ask whether to load external file changes is enabled, otherwise the changes won’t be loaded.\n","excerpt":"Save Save Files Faster Use QFile instead of QSaveFile to save files. …","ref":"/docs/preferences/actions/","title":"Actions"},{"body":"Save Save Files Faster Use QFile instead of QSaveFile to save files.\nThis is slightly unsafer but notably faster.\nSave File On Compilation Save your code when compiling it.\nSave File On Execution Save your code when executing it.\nSave Testcases on Save Save the test cases on the disk when saving the code.\nYou can choose where to save the test cases in File Path/Testcases.\nAuto Save Auto Save Interval Type It is easier to describe if we explain a little bit about the internal implementation: There is a countdown timer. When we “reset” it, it will be “running” in the next Auto Save Interval milliseconds, and after Auto Save Interval milliseconds, the timer will “timeout” and the code is auto-saved.\nAfter the last modification The timer is reset every time when you modify the code. i.e. Your codes will be saved if you haven’t modified it for Auto Save Interval milliseconds.\nThis mode is suitable for a small Auto Save Interval, so that your codes will be auto-saved every time you take a short break from typing. If the interval is too long, it’s likely that your codes will never be auto-saved.\nAfter the first modification The timer is reset when you modify the code if the timer is not running. i.e. Your codes will be saved if you modified it Auto Save Interval milliseconds ago.\nThis mode is suitable for a long Auto Save Interval, otherwise it’s likely that the save happens when you are typing, which could affect your typing experience.\nWithout modification The timer is reset every time when it timeouts. i.e. Your codes will be saved every Auto Save Interval milliseconds, no matter you have modified it or not.\nThis mode is suitable for saving test cases, etc. In the other modes, the test cases are not auto-saved if you don’t modify the codes.\nDetached Execution Terminal Program \u0026 Terminal Arguments This setting is only available on Linux.\nThe terminal program is the name/path of the terminal emulator you want to use.\nThe arguments are used to execute a given command. i.e. \u003cTerminal Program\u003e \u003cTerminal Arguments\u003e \u003ccommand\u003e can be used to execute \u003ccommand\u003e in the terminal emulator.\nIn most terminal emulators including konsole, xterm and xfce-terminal, the argument is -e.\nIn gnome-terminal, it is --.\nYou can read the manual of your terminal emulator to get the suitable arguments.\nSave Session Restore last session at startup Save the status of the editor, and restore most status from the last session when you start CP Editor.\nYou can use the --no-hot-exit command line option to temporarily disable this, in case that the last session is too big and the application hangs.\nAuto-save the current session periodically Save the current session periodically instead of only when exiting the application.\nThis is useful if you don’t want to lose your codes after abnormal terminations, such as power outage, forced shutdown, killing CP Editor, etc. However, if the files and test cases are too large, the editor hangs each time the auto-save happens.\nBind file and problem Restore the problem URL when opening a file If a problem URL was set for a file, when you open that file again, the problem URL will be restored.\nOpen the old file when parsing an old problem URL If a problem URL was set for a file, when parsing that problem from Competitive Companion again, the old file will be opened.\nEmpty Test Cases Run your codes on empty test cases Run your code on all non-hidden test cases even if the input is empty.\nCheck your answer on test cases with empty output Check your answer even if your output or the expected output is empty.\nLoad External File Changes Auto-load external file changes if there’s no unsaved modification If the file on the disk and the code in CP Editor was the same, and then the file is changed outside of CP Editor, load the external change without confirmation.\nAsk whether to load external file changes If the file is changed outside of CP Editor, ask whether to load the change or not.\nIf this setting is disabled, external changes won’t be loaded.\nAuto-load external file changes if there’s no unsaved modification overrides this setting. i.e. if Auto-load external file changes if there’s no unsaved modification is enabled, external file changes will be loaded without confrimation regardless of Ask whether to load external file changes ; if Auto-load external file changes if there’s no unsaved modification is disabled, the user will be asked whether to load the changes only when Ask whether to load external file changes is enabled, otherwise the changes won’t be loaded.\n","excerpt":"Save Save Files Faster Use QFile instead of QSaveFile to save files. …","ref":"/ru/docs/preferences/actions/","title":"Actions"},{"body":"Save Save Files Faster Use QFile instead of QSaveFile to save files.\nThis is slightly unsafer but notably faster.\nSave File On Compilation Save your code when compiling it.\nSave File On Execution Save your code when executing it.\nSave Testcases on Save Save the test cases on the disk when saving the code.\nYou can choose where to save the test cases in File Path/Testcases.\nAuto Save Auto Save Interval Type It is easier to describe if we explain a little bit about the internal implementation: There is a countdown timer. When we “reset” it, it will be “running” in the next Auto Save Interval milliseconds, and after Auto Save Interval milliseconds, the timer will “timeout” and the code is auto-saved.\nAfter the last modification The timer is reset every time when you modify the code. i.e. Your codes will be saved if you haven’t modified it for Auto Save Interval milliseconds.\nThis mode is suitable for a small Auto Save Interval, so that your codes will be auto-saved every time you take a short break from typing. If the interval is too long, it’s likely that your codes will never be auto-saved.\nAfter the first modification The timer is reset when you modify the code if the timer is not running. i.e. Your codes will be saved if you modified it Auto Save Interval milliseconds ago.\nThis mode is suitable for a long Auto Save Interval, otherwise it’s likely that the save happens when you are typing, which could affect your typing experience.\nWithout modification The timer is reset every time when it timeouts. i.e. Your codes will be saved every Auto Save Interval milliseconds, no matter you have modified it or not.\nThis mode is suitable for saving test cases, etc. In the other modes, the test cases are not auto-saved if you don’t modify the codes.\nDetached Execution Terminal Program \u0026 Terminal Arguments This setting is only available on Linux.\nThe terminal program is the name/path of the terminal emulator you want to use.\nThe arguments are used to execute a given command. i.e. \u003cTerminal Program\u003e \u003cTerminal Arguments\u003e \u003ccommand\u003e can be used to execute \u003ccommand\u003e in the terminal emulator.\nIn most terminal emulators including konsole, xterm and xfce-terminal, the argument is -e.\nIn gnome-terminal, it is --.\nYou can read the manual of your terminal emulator to get the suitable arguments.\nSave Session Restore last session at startup Save the status of the editor, and restore most status from the last session when you start CP Editor.\nYou can use the --no-hot-exit command line option to temporarily disable this, in case that the last session is too big and the application hangs.\nAuto-save the current session periodically Save the current session periodically instead of only when exiting the application.\nThis is useful if you don’t want to lose your codes after abnormal terminations, such as power outage, forced shutdown, killing CP Editor, etc. However, if the files and test cases are too large, the editor hangs each time the auto-save happens.\nBind file and problem Restore the problem URL when opening a file If a problem URL was set for a file, when you open that file again, the problem URL will be restored.\nOpen the old file when parsing an old problem URL If a problem URL was set for a file, when parsing that problem from Competitive Companion again, the old file will be opened.\nEmpty Test Cases Run your codes on empty test cases Run your code on all non-hidden test cases even if the input is empty.\nCheck your answer on test cases with empty output Check your answer even if your output or the expected output is empty.\nLoad External File Changes Auto-load external file changes if there’s no unsaved modification If the file on the disk and the code in CP Editor was the same, and then the file is changed outside of CP Editor, load the external change without confirmation.\nAsk whether to load external file changes If the file is changed outside of CP Editor, ask whether to load the change or not.\nIf this setting is disabled, external changes won’t be loaded.\nAuto-load external file changes if there’s no unsaved modification overrides this setting. i.e. if Auto-load external file changes if there’s no unsaved modification is enabled, external file changes will be loaded without confrimation regardless of Ask whether to load external file changes ; if Auto-load external file changes if there’s no unsaved modification is disabled, the user will be asked whether to load the changes only when Ask whether to load external file changes is enabled, otherwise the changes won’t be loaded.\n","excerpt":"Save Save Files Faster Use QFile instead of QSaveFile to save files. …","ref":"/zh/docs/preferences/actions/","title":"Actions"},{"body":"This method is only for Arch Linux (or other distros based on Arch Linux, including Manjaro) users.\nThere are two AUR packages for CP Editor: cpeditor for the stable version and cpeditor-git for the alpha version.\nIf you have yay installed, you can run yay -S cpeditor to install. If you don’t have yay and don’t know how to install from AUR, you can read how to install yay or the Arch Wiki.\nAfter the installation, you’ll be able to run CP Editor by cpeditor in your terminal or launch from the start menu like other apps.\n","excerpt":"This method is only for Arch Linux (or other distros based on Arch …","ref":"/docs/installation/build-from-aur/","title":"Build from AUR"},{"body":"This method is only for Arch Linux (or other distros based on Arch Linux, including Manjaro) users.\nThere are two AUR packages for CP Editor: cpeditor for the stable version and cpeditor-git for the alpha version.\nIf you have yay installed, you can run yay -S cpeditor to install. If you don’t have yay and don’t know how to install from AUR, you can read how to install yay or the Arch Wiki.\nAfter the installation, you’ll be able to run CP Editor by cpeditor in your terminal or launch from the start menu like other apps.\n","excerpt":"This method is only for Arch Linux (or other distros based on Arch …","ref":"/ru/docs/installation/build-from-aur/","title":"Build from AUR"},{"body":"You can set the preferences by either clicking Options-\u003ePreferences or pressing Ctrl+P.\nYou can hover over the settings to see the tooltips. Usually, the tooltips are clear enough, but if you want a more detailed explaination, you can read the documentation.\n","excerpt":"You can set the preferences by either clicking Options-\u003ePreferences or …","ref":"/docs/preferences/","title":"Preferences"},{"body":"You can set the preferences by either clicking Options-\u003ePreferences or pressing Ctrl+P.\nYou can hover over the settings to see the tooltips. Usually, the tooltips are clear enough, but if you want a more detailed explaination, you can read the documentation.\n","excerpt":"You can set the preferences by either clicking Options-\u003ePreferences or …","ref":"/ru/docs/preferences/","title":"Preferences"},{"body":"这个方法只适用于 Arch Linux（或基于 Arch Linux 的 Linux 发行版，如 Manjaro）。\nCP Editor 在 AUR 上有两个包：稳定版 cpeditor 和 alpha 版 cpeditor-git。\n如果你安装了 yay，你可以运行 yay -S cpeditor 来安装。如果你没有安装 yay 并且你不知道如何从 AUR 安装，你可以阅读 如何安装 yay 或者 Arch Wiki，或者从 archlinuxcn 安装 yay。\n安装完成后，你就可以在终端中运行 cpeditor 或在开始菜单中运行 CP Editor 了。\n","excerpt":"这个方法只适用于 Arch Linux（或基于 Arch Linux 的 Linux 发行版，如 Manjaro）。\nCP Editor …","ref":"/zh/docs/installation/build-from-aur/","title":"从 AUR 构建"},{"body":"你可以通过点击 选项-\u003e设置 或者键入 Ctrl+P 设定设置。\n你可以将鼠标悬停在设置上以查看工具提示。通常，工具提示足够清晰，但是如果你需要更详细的说明，可以阅读文档。\n","excerpt":"你可以通过点击 选项-\u003e设置 或者键入 Ctrl+P 设定设置。\n你可以将鼠标悬停在设置上以查看工具提示。通常，工具提示足够清晰，但是如果你 …","ref":"/zh/docs/preferences/","title":"设置"},{"body":"Clang Format Clang Format is used to format the C++ codes. You can click Actions-\u003eFormat Code or press the shortcut Ctrl+Shift+I to format the codes. If you have selected a part of the code, only the selection (and its necessary adjacent codes) will be formatted.\nSee also Setup Clang Format.\nPath The path to the clang-format executable, or simply clang-format if it’s in the PATH environment variable.\nStyle The Clang Format style. The content here is the same as the content of a .clang-format file.\nYou can read Clang-Format Style Options documentation or search for other materials to learn how to write the styles.\nLanguage Server See also Setup Language Server.\nUse Linting with Language Server Use language server to lint errors, warnings, hints, etc.\nYou can hover over the squiggles to see the tooltips for the explaination of the errors/warnings.\nDelay in Linting Update linting if you haven’t been typing for delay milliseconds.\nPath to LSP executable The path to the language server program, or the name if it’s in the PATH environment variable.\nArguments for Language Server Additional arguments for the language server program. See the documentation of the language server program you are using for more information.\nFor example, if you are using pyls for Python, you probably want to use python as the language server program, and use -m pyls as the arguments.\nCompetitive Companion See also Setup Competitive Companion.\nOpen New Tabs Open a new tab when a problem is parsed.\nIf this is disabled, when parsing a problem, the test cases in the current tab will be replaced by the new test cases.\nConnection Port Usually, you don’t have to modify this setting. The default port 10045 is supported by Competitive Companion, so if you are using the default port, you don’t have to add custom ports in Competitive Companion. However, in case of port conflicts, etc., you can change the port and add custom ports in Competitive Companion.\nUse the time limit from Competitive Companion Use the time limit parsed by Competitive Companion as the time limit of the corresponding tab.\nHead Comments The head comments are added at the head of the code when parsing a problem.\nContent The content of the head comments. You can use the following place holders:\n ${time}: The time when the problem was parsed. The time format can be set in Time format for the head comments. ${json.X.Y}: An attribute of the data provided by Competitive Companion. You can read more about the attributes in the documentation of Competitive Companion. For example, ${json.name} is the name of the problem.  Time Format The format of the ${time} place holder in the head comments. You can read the Qt documentation for available expressions:\n Date Format Time Format  CF Tool You can use CF Tool to submit your solutions to Codeforces.\nTo submit a solution, you have to either parse a problem by Competitive Companion from Codeforces, or manually set the problem URL of a tab in the context menu of it.\nSee also Setup CF Tool.\nPath The path to the cf executable file, or simply cf if it’s in the PATH environment variable.\nShow toast messages for submission verdicts Show a toast message when the verdict of a submission is determined.\nA toast message is a “system notification”, which is visible outside of CP Editor.\nThis is useful if you want to get the verdict of the previous problem when reading/solving the next problem.\n","excerpt":"Clang Format Clang Format is used to format the C++ codes. You can …","ref":"/docs/preferences/extensions/","title":"Extensions"},{"body":"Clang Format Clang Format is used to format the C++ codes. You can click Actions-\u003eFormat Code or press the shortcut Ctrl+Shift+I to format the codes. If you have selected a part of the code, only the selection (and its necessary adjacent codes) will be formatted.\nSee also Setup Clang Format.\nPath The path to the clang-format executable, or simply clang-format if it’s in the PATH environment variable.\nStyle The Clang Format style. The content here is the same as the content of a .clang-format file.\nYou can read Clang-Format Style Options documentation or search for other materials to learn how to write the styles.\nLanguage Server See also Setup Language Server.\nUse Linting with Language Server Use language server to lint errors, warnings, hints, etc.\nYou can hover over the squiggles to see the tooltips for the explaination of the errors/warnings.\nDelay in Linting Update linting if you haven’t been typing for delay milliseconds.\nPath to LSP executable The path to the language server program, or the name if it’s in the PATH environment variable.\nArguments for Language Server Additional arguments for the language server program. See the documentation of the language server program you are using for more information.\nFor example, if you are using pyls for Python, you probably want to use python as the language server program, and use -m pyls as the arguments.\nCompetitive Companion See also Setup Competitive Companion.\nOpen New Tabs Open a new tab when a problem is parsed.\nIf this is disabled, when parsing a problem, the test cases in the current tab will be replaced by the new test cases.\nConnection Port Usually, you don’t have to modify this setting. The default port 10045 is supported by Competitive Companion, so if you are using the default port, you don’t have to add custom ports in Competitive Companion. However, in case of port conflicts, etc., you can change the port and add custom ports in Competitive Companion.\nUse the time limit from Competitive Companion Use the time limit parsed by Competitive Companion as the time limit of the corresponding tab.\nHead Comments The head comments are added at the head of the code when parsing a problem.\nContent The content of the head comments. You can use the following place holders:\n ${time}: The time when the problem was parsed. The time format can be set in Time format for the head comments. ${json.X.Y}: An attribute of the data provided by Competitive Companion. You can read more about the attributes in the documentation of Competitive Companion. For example, ${json.name} is the name of the problem.  Time Format The format of the ${time} place holder in the head comments. You can read the Qt documentation for available expressions:\n Date Format Time Format  CF Tool You can use CF Tool to submit your solutions to Codeforces.\nTo submit a solution, you have to either parse a problem by Competitive Companion from Codeforces, or manually set the problem URL of a tab in the context menu of it.\nSee also Setup CF Tool.\nPath The path to the cf executable file, or simply cf if it’s in the PATH environment variable.\nShow toast messages for submission verdicts Show a toast message when the verdict of a submission is determined.\nA toast message is a “system notification”, which is visible outside of CP Editor.\nThis is useful if you want to get the verdict of the previous problem when reading/solving the next problem.\n","excerpt":"Clang Format Clang Format is used to format the C++ codes. You can …","ref":"/ru/docs/preferences/extensions/","title":"Extensions"},{"body":"Clang Format Clang Format is used to format the C++ codes. You can click Actions-\u003eFormat Code or press the shortcut Ctrl+Shift+I to format the codes. If you have selected a part of the code, only the selection (and its necessary adjacent codes) will be formatted.\nSee also Setup Clang Format.\nPath The path to the clang-format executable, or simply clang-format if it’s in the PATH environment variable.\nStyle The Clang Format style. The content here is the same as the content of a .clang-format file.\nYou can read Clang-Format Style Options documentation or search for other materials to learn how to write the styles.\nLanguage Server See also Setup Language Server.\nUse Linting with Language Server Use language server to lint errors, warnings, hints, etc.\nYou can hover over the squiggles to see the tooltips for the explaination of the errors/warnings.\nDelay in Linting Update linting if you haven’t been typing for delay milliseconds.\nPath to LSP executable The path to the language server program, or the name if it’s in the PATH environment variable.\nArguments for Language Server Additional arguments for the language server program. See the documentation of the language server program you are using for more information.\nFor example, if you are using pyls for Python, you probably want to use python as the language server program, and use -m pyls as the arguments.\nCompetitive Companion See also Setup Competitive Companion.\nOpen New Tabs Open a new tab when a problem is parsed.\nIf this is disabled, when parsing a problem, the test cases in the current tab will be replaced by the new test cases.\nConnection Port Usually, you don’t have to modify this setting. The default port 10045 is supported by Competitive Companion, so if you are using the default port, you don’t have to add custom ports in Competitive Companion. However, in case of port conflicts, etc., you can change the port and add custom ports in Competitive Companion.\nUse the time limit from Competitive Companion Use the time limit parsed by Competitive Companion as the time limit of the corresponding tab.\nHead Comments The head comments are added at the head of the code when parsing a problem.\nContent The content of the head comments. You can use the following place holders:\n ${time}: The time when the problem was parsed. The time format can be set in Time format for the head comments. ${json.X.Y}: An attribute of the data provided by Competitive Companion. You can read more about the attributes in the documentation of Competitive Companion. For example, ${json.name} is the name of the problem.  Time Format The format of the ${time} place holder in the head comments. You can read the Qt documentation for available expressions:\n Date Format Time Format  CF Tool You can use CF Tool to submit your solutions to Codeforces.\nTo submit a solution, you have to either parse a problem by Competitive Companion from Codeforces, or manually set the problem URL of a tab in the context menu of it.\nSee also Setup CF Tool.\nPath The path to the cf executable file, or simply cf if it’s in the PATH environment variable.\nShow toast messages for submission verdicts Show a toast message when the verdict of a submission is determined.\nA toast message is a “system notification”, which is visible outside of CP Editor.\nThis is useful if you want to get the verdict of the previous problem when reading/solving the next problem.\n","excerpt":"Clang Format Clang Format is used to format the C++ codes. You can …","ref":"/zh/docs/preferences/extensions/","title":"Extensions"},{"body":"Shortcuts in the Preferences Window You can use Ctlr+D, Ctrl+R and Ctrl+S for “Default”, “Reset” and “Apply” respectively.\nYou can use Ctlr+Tab and Ctlr+Shift+Tab to go through the preferences pages.\nEditor Shortcuts Besides the shortcuts in the menu, you can use the Read-only Key Bindings and the Editing Key Bindings. There are also some hidden shortcuts: Tab (when there’s a selection) and Shift+Tab for indent and unindent, Ctrl+Enter and Ctrl+Shift+Enter for inserting line after and before, Shift+Delete for deleting the current line.\nDrag and Drop You can drag files and drop them into the main editor or the input/expected part of test cases.\nTabs You can use Ctrl+Tab and Ctrl+Shift+Tab to switch to the next/previous tab.\nYou can right-click on the tabs to get a useful context menu. The content of the menu is based on whether this tab is untitled or not, has problem URL or not, etc.\nTest Cases Testlib checkers are compiled when changing the checker or changing the preferences, so you may have to wait for it after the execution is finished.\nYou can load test cases from files, edit testcases in bigger windows and save a test case in a file in the right-click menu of the test cases.\nYou can click the verdict to open the diff viewer.\nView mode The view mode is helpful to focus on your codes, investigate the outputs and errors, or make the editor narrower so that you can split your screen into two parts.\nYou can set a hotkey for switching view modes in Preferences.\nLaunch CP Editor in the command line CP Editor supports some command-line options, run cpeditor --help for more information.\nOn Windows, it’s better to use UNIX-like shells like git bash.\nIn the command line, you can open a non-existing file as a tab by cpeditor \u003cpath\u003e (and you can save to this path later), open all C++ files in a directory recursively by cpeditor --cpp \u003cdirectory\u003e or temporarily disable Restore last session at startup by cpeditor --no-hot-exit.\nCP Editor normally closes when receiving SIGINT and SIGHUP, so if you start CP Editor in the command line, you can safely press Ctrl+C to quit.\n","excerpt":"Shortcuts in the Preferences Window You can use Ctlr+D, Ctrl+R and …","ref":"/docs/tips/","title":"Tips"},{"body":"Shortcuts in the Preferences Window You can use Ctlr+D, Ctrl+R and Ctrl+S for “Default”, “Reset” and “Apply” respectively.\nYou can use Ctlr+Tab and Ctlr+Shift+Tab to go through the preferences pages.\nEditor Shortcuts Besides the shortcuts in the menu, you can use the Read-only Key Bindings and the Editing Key Bindings. There are also some hidden shortcuts: Tab (when there’s a selection) and Shift+Tab for indent and unindent, Ctrl+Enter and Ctrl+Shift+Enter for inserting line after and before, Shift+Delete for deleting the current line.\nDrag and Drop You can drag files and drop them into the main editor or the input/expected part of test cases.\nTabs You can use Ctrl+Tab and Ctrl+Shift+Tab to switch to the next/previous tab.\nYou can right-click on the tabs to get a useful context menu. The content of the menu is based on whether this tab is untitled or not, has problem URL or not, etc.\nTest Cases Testlib checkers are compiled when changing the checker or changing the preferences, so you may have to wait for it after the execution is finished.\nYou can load test cases from files, edit testcases in bigger windows and save a test case in a file in the right-click menu of the test cases.\nYou can click the verdict to open the diff viewer.\nView mode The view mode is helpful to focus on your codes, investigate the outputs and errors, or make the editor narrower so that you can split your screen into two parts.\nYou can set a hotkey for switching view modes in Preferences.\nLaunch CP Editor in the command line CP Editor supports some command-line options, run cpeditor --help for more information.\nOn Windows, it’s better to use UNIX-like shells like git bash.\nIn the command line, you can open a non-existing file as a tab by cpeditor \u003cpath\u003e (and you can save to this path later), open all C++ files in a directory recursively by cpeditor --cpp \u003cdirectory\u003e or temporarily disable Restore last session at startup by cpeditor --no-hot-exit.\nCP Editor normally closes when receiving SIGINT and SIGHUP, so if you start CP Editor in the command line, you can safely press Ctrl+C to quit.\n","excerpt":"Shortcuts in the Preferences Window You can use Ctlr+D, Ctrl+R and …","ref":"/ru/docs/tips/","title":"Tips"},{"body":"Shortcuts in the Preferences Window You can use Ctlr+D, Ctrl+R and Ctrl+S for “Default”, “Reset” and “Apply” respectively.\nYou can use Ctlr+Tab and Ctlr+Shift+Tab to go through the preferences pages.\nEditor Shortcuts Besides the shortcuts in the menu, you can use the Read-only Key Bindings and the Editing Key Bindings. There are also some hidden shortcuts: Tab (when there’s a selection) and Shift+Tab for indent and unindent, Ctrl+Enter and Ctrl+Shift+Enter for inserting line after and before, Shift+Delete for deleting the current line.\nDrag and Drop You can drag files and drop them into the main editor or the input/expected part of test cases.\nTabs You can use Ctrl+Tab and Ctrl+Shift+Tab to switch to the next/previous tab.\nYou can right-click on the tabs to get a useful context menu. The content of the menu is based on whether this tab is untitled or not, has problem URL or not, etc.\nTest Cases Testlib checkers are compiled when changing the checker or changing the preferences, so you may have to wait for it after the execution is finished.\nYou can load test cases from files, edit testcases in bigger windows and save a test case in a file in the right-click menu of the test cases.\nYou can click the verdict to open the diff viewer.\nView mode The view mode is helpful to focus on your codes, investigate the outputs and errors, or make the editor narrower so that you can split your screen into two parts.\nYou can set a hotkey for switching view modes in Preferences.\nLaunch CP Editor in the command line CP Editor supports some command-line options, run cpeditor --help for more information.\nOn Windows, it’s better to use UNIX-like shells like git bash.\nIn the command line, you can open a non-existing file as a tab by cpeditor \u003cpath\u003e (and you can save to this path later), open all C++ files in a directory recursively by cpeditor --cpp \u003cdirectory\u003e or temporarily disable Restore last session at startup by cpeditor --no-hot-exit.\nCP Editor normally closes when receiving SIGINT and SIGHUP, so if you start CP Editor in the command line, you can safely press Ctrl+C to quit.\n","excerpt":"Shortcuts in the Preferences Window You can use Ctlr+D, Ctrl+R and …","ref":"/zh/docs/tips/","title":"Tips"},{"body":"Testcases Input File Save Path \u0026 Answer File Save Path The path where the test cases are saved. If it is a relative path, it is relative to the source file.\nYou can use the following place holders:\n ${filename}: the complete file name ${basename}: the base file name without the suffix ${0-index}: the index of the test case started from 0 ${1-index}: the index of the test case started from 1  For example, a test case is the 3-rd test case of the source file /a/b/c.cpp, the place holders are:\n ${filename}: c.cpp ${basename}: c ${0-index}: 2 ${1-index}: 3  If the path is testcases/${basename}-${1-index}.in, the input of this test case will be saved in /a/b/testcases/c-3.in.\nTestcases Matching Rules The rules used to match test cases when loading pairs of test cases.\nEach rule is a pair of regular expression patterns. The first regex matches the whole input file name, and the second pattern is a replacement pattern which is the name of the answer file.\nFor example, you can use (.+)\\.in and \\1.out to match test-1.in and test-1.out, or use (.+)\\.in\\.(\\d+) and \\1.ans.\\2 to match test.in.3 and test.ans.3.\nWhen loading pairs of test cases, each rule which matches an input file will be used to try to find the corresponding answer file to the input file.\nProblem URL Default File Path For Problem URLs The default path when choosing where to save an untitled tab with problem URL.\nEach rule is a pair of regular expression patterns. The first regex matches a part of the problem URL, and the second pattern is a replacement pattern which is the default save path.\nWhen saving a file with problem URL, if the problem URL matches at least one regex in the rules, the default save path will be the replacement of the first matching regex.\nHere’s an example of a rule:\nThe problem URL regex: codeforces.com/contest/([1-9]\\d*)/problem/([A-Z][1-9]?)\nThe file path: /home/username/Codeforces/\\1/\\2\nDefault Paths The default path used when the user is asked for a file path.\nThere are several actions, different actions can use different default paths.\nThe user can set multiple default paths, each default path has a name. A default path can be used as a place holder in the default path of an action. When the user chooses a path for an action, serveral default paths can be set to this path.\nFor example:\n The default path for the action “Save File” is ${file}, and “Save File” changes file and testcase. The default path for the action “Load Single Test Case” is ${testcase}, and “Load Single Test Case” only changes testcase. At the beginning, file is /a/b and testcase is /a/c.   You are asked to choose the path for “Load Single Test Case”, the default path is /a/c, and you choose /a/d as the path. Now file is still /a/b, but testcase is changed to /a/d. You are asked to choose the path for “Save File”, the default path is /a/b, and you choose /a/e as the path. Now both file and testcase are /a/e. You are asked to choose the path for “Load Single Test Case”, the default path is /a/e, because testcase was modified by choosing /a/e for “Save File”.  In the preferences window, the default paths changed by an action is a comma-separated list.\n","excerpt":"Testcases Input File Save Path \u0026 Answer File Save Path The path where …","ref":"/docs/preferences/file-path/","title":"File Path"},{"body":"Testcases Input File Save Path \u0026 Answer File Save Path The path where the test cases are saved. If it is a relative path, it is relative to the source file.\nYou can use the following place holders:\n ${filename}: the complete file name ${basename}: the base file name without the suffix ${0-index}: the index of the test case started from 0 ${1-index}: the index of the test case started from 1  For example, a test case is the 3-rd test case of the source file /a/b/c.cpp, the place holders are:\n ${filename}: c.cpp ${basename}: c ${0-index}: 2 ${1-index}: 3  If the path is testcases/${basename}-${1-index}.in, the input of this test case will be saved in /a/b/testcases/c-3.in.\nTestcases Matching Rules The rules used to match test cases when loading pairs of test cases.\nEach rule is a pair of regular expression patterns. The first regex matches the whole input file name, and the second pattern is a replacement pattern which is the name of the answer file.\nFor example, you can use (.+)\\.in and \\1.out to match test-1.in and test-1.out, or use (.+)\\.in\\.(\\d+) and \\1.ans.\\2 to match test.in.3 and test.ans.3.\nWhen loading pairs of test cases, each rule which matches an input file will be used to try to find the corresponding answer file to the input file.\nProblem URL Default File Path For Problem URLs The default path when choosing where to save an untitled tab with problem URL.\nEach rule is a pair of regular expression patterns. The first regex matches a part of the problem URL, and the second pattern is a replacement pattern which is the default save path.\nWhen saving a file with problem URL, if the problem URL matches at least one regex in the rules, the default save path will be the replacement of the first matching regex.\nHere’s an example of a rule:\nThe problem URL regex: codeforces.com/contest/([1-9]\\d*)/problem/([A-Z][1-9]?)\nThe file path: /home/username/Codeforces/\\1/\\2\nDefault Paths The default path used when the user is asked for a file path.\nThere are several actions, different actions can use different default paths.\nThe user can set multiple default paths, each default path has a name. A default path can be used as a place holder in the default path of an action. When the user chooses a path for an action, serveral default paths can be set to this path.\nFor example:\n The default path for the action “Save File” is ${file}, and “Save File” changes file and testcase. The default path for the action “Load Single Test Case” is ${testcase}, and “Load Single Test Case” only changes testcase. At the beginning, file is /a/b and testcase is /a/c.   You are asked to choose the path for “Load Single Test Case”, the default path is /a/c, and you choose /a/d as the path. Now file is still /a/b, but testcase is changed to /a/d. You are asked to choose the path for “Save File”, the default path is /a/b, and you choose /a/e as the path. Now both file and testcase are /a/e. You are asked to choose the path for “Load Single Test Case”, the default path is /a/e, because testcase was modified by choosing /a/e for “Save File”.  In the preferences window, the default paths changed by an action is a comma-separated list.\n","excerpt":"Testcases Input File Save Path \u0026 Answer File Save Path The path where …","ref":"/ru/docs/preferences/file-path/","title":"File Path"},{"body":"Testcases Input File Save Path \u0026 Answer File Save Path The path where the test cases are saved. If it is a relative path, it is relative to the source file.\nYou can use the following place holders:\n ${filename}: the complete file name ${basename}: the base file name without the suffix ${0-index}: the index of the test case started from 0 ${1-index}: the index of the test case started from 1  For example, a test case is the 3-rd test case of the source file /a/b/c.cpp, the place holders are:\n ${filename}: c.cpp ${basename}: c ${0-index}: 2 ${1-index}: 3  If the path is testcases/${basename}-${1-index}.in, the input of this test case will be saved in /a/b/testcases/c-3.in.\nTestcases Matching Rules The rules used to match test cases when loading pairs of test cases.\nEach rule is a pair of regular expression patterns. The first regex matches the whole input file name, and the second pattern is a replacement pattern which is the name of the answer file.\nFor example, you can use (.+)\\.in and \\1.out to match test-1.in and test-1.out, or use (.+)\\.in\\.(\\d+) and \\1.ans.\\2 to match test.in.3 and test.ans.3.\nWhen loading pairs of test cases, each rule which matches an input file will be used to try to find the corresponding answer file to the input file.\nProblem URL Default File Path For Problem URLs The default path when choosing where to save an untitled tab with problem URL.\nEach rule is a pair of regular expression patterns. The first regex matches a part of the problem URL, and the second pattern is a replacement pattern which is the default save path.\nWhen saving a file with problem URL, if the problem URL matches at least one regex in the rules, the default save path will be the replacement of the first matching regex.\nHere’s an example of a rule:\nThe problem URL regex: codeforces.com/contest/([1-9]\\d*)/problem/([A-Z][1-9]?)\nThe file path: /home/username/Codeforces/\\1/\\2\nDefault Paths The default path used when the user is asked for a file path.\nThere are several actions, different actions can use different default paths.\nThe user can set multiple default paths, each default path has a name. A default path can be used as a place holder in the default path of an action. When the user chooses a path for an action, serveral default paths can be set to this path.\nFor example:\n The default path for the action “Save File” is ${file}, and “Save File” changes file and testcase. The default path for the action “Load Single Test Case” is ${testcase}, and “Load Single Test Case” only changes testcase. At the beginning, file is /a/b and testcase is /a/c.   You are asked to choose the path for “Load Single Test Case”, the default path is /a/c, and you choose /a/d as the path. Now file is still /a/b, but testcase is changed to /a/d. You are asked to choose the path for “Save File”, the default path is /a/b, and you choose /a/e as the path. Now both file and testcase are /a/e. You are asked to choose the path for “Load Single Test Case”, the default path is /a/e, because testcase was modified by choosing /a/e for “Save File”.  In the preferences window, the default paths changed by an action is a comma-separated list.\n","excerpt":"Testcases Input File Save Path \u0026 Answer File Save Path The path where …","ref":"/zh/docs/preferences/file-path/","title":"File Path"},{"body":"","excerpt":"","ref":"/docs/source-code/","title":"Source Code"},{"body":"","excerpt":"","ref":"/ru/docs/source-code/","title":"Source Code"},{"body":"","excerpt":"","ref":"/zh/docs/source-code/","title":"Source Code"},{"body":" How to fetch testcases from the websites?  You have to install Competitive Companion on your browser, and use it on the website while CP Editor is running.   How to submit to CF inside the editor?  You have to either parse the problem from Competitive Companion, or set the problem URL in the right-click menu of the tabs. Then you’ll see the submit button.   I am using it on Codeforces but the submit button is not clickable.  It’s because the editor can’t run the cf command. Please make sure it’s in the PATH or set the path to it in the Preferences.   When I click the Submit button, I get some message saying template is required?  cf tool requires you to configure it before you use it. Please run cf config to set the username \u0026 password and add a template.   I got an invalid payload when parsing sample testcases?  Please try restarting the browser and the editor. It’s known that there are few people always fail on this even after restarting, and Firefox is more stable than Google Chrome. We’re really sorry if it always fails, you can change a browser as for now, we will try our best to investigate it.   How to enable error linting in the code editor?  You need to install a Language Server program and set the settings in Preferences -\u003e Extensions -\u003e Language Server. You can learn about more details here.    ","excerpt":" How to fetch testcases from the websites?  You have to install …","ref":"/docs/faq/","title":"FAQ"},{"body":" How to fetch testcases from the websites?  You have to install Competitive Companion on your browser, and use it on the website while CP Editor is running.   How to submit to CF inside the editor?  You have to either parse the problem from Competitive Companion, or set the problem URL in the right-click menu of the tabs. Then you’ll see the submit button.   I am using it on Codeforces but the submit button is not clickable.  It’s because the editor can’t run the cf command. Please make sure it’s in the PATH or set the path to it in the Preferences.   When I click the Submit button, I get some message saying template is required?  cf tool requires you to configure it before you use it. Please run cf config to set the username \u0026 password and add a template.   I got an invalid payload when parsing sample testcases?  Please try restarting the browser and the editor. It’s known that there are few people always fail on this even after restarting, and Firefox is more stable than Google Chrome. We’re really sorry if it always fails, you can change a browser as for now, we will try our best to investigate it.   How to enable error linting in the code editor?  You need to install a Language Server program and set the settings in Preferences -\u003e Extensions -\u003e Language Server. You can learn about more details here.    ","excerpt":" How to fetch testcases from the websites?  You have to install …","ref":"/ru/docs/faq/","title":"FAQ"},{"body":" How to fetch testcases from the websites?  You have to install Competitive Companion on your browser, and use it on the website while CP Editor is running.   How to submit to CF inside the editor?  You have to either parse the problem from Competitive Companion, or set the problem URL in the right-click menu of the tabs. Then you’ll see the submit button.   I am using it on Codeforces but the submit button is not clickable.  It’s because the editor can’t run the cf command. Please make sure it’s in the PATH or set the path to it in the Preferences.   When I click the Submit button, I get some message saying template is required?  cf tool requires you to configure it before you use it. Please run cf config to set the username \u0026 password and add a template.   I got an invalid payload when parsing sample testcases?  Please try restarting the browser and the editor. It’s known that there are few people always fail on this even after restarting, and Firefox is more stable than Google Chrome. We’re really sorry if it always fails, you can change a browser as for now, we will try our best to investigate it.   How to enable error linting in the code editor?  You need to install a Language Server program and set the settings in Preferences -\u003e Extensions -\u003e Language Server. You can learn about more details here.    ","excerpt":" How to fetch testcases from the websites?  You have to install …","ref":"/zh/docs/faq/","title":"FAQ"},{"body":"You can set custom key bindings for many actions. You can change the key by clicking the edit and press the key you want. You can delete a custom key binding by clicking the button on the right.\n","excerpt":"You can set custom key bindings for many actions. You can change the …","ref":"/docs/preferences/key-bindings/","title":"Key Bindings"},{"body":"You can set custom key bindings for many actions. You can change the key by clicking the edit and press the key you want. You can delete a custom key binding by clicking the button on the right.\n","excerpt":"You can set custom key bindings for many actions. You can change the …","ref":"/ru/docs/preferences/key-bindings/","title":"Key Bindings"},{"body":"You can set custom key bindings for many actions. You can change the key by clicking the edit and press the key you want. You can delete a custom key binding by clicking the button on the right.\n","excerpt":"You can set custom key bindings for many actions. You can change the …","ref":"/zh/docs/preferences/key-bindings/","title":"Key Bindings"},{"body":"Update Check for updates on startup When CP Editor starts, checks whether there are new versions of CP Editor.\nIf there are new versions, a pop-up window will ask you whether to update or not.\nUse the beta version When checking for updates, check for beta versions. The beta versions usually have more features and improvements, but they are not as stable as the stable versions.\nLimits Default Time Limit The default time limit when executing programs.\nThe program will be killed if it doesn’t terminate in the time limit.\nOutput Length Limit The maximum number of characters in the output of the program.\nThe program will be killed if either of its stdout or stderr is too long.\nOutput Display Length Limit The maximum number of characters to be displayed for the output of the program.\nIf the output is too long, it will be elided.\nMessage Length Limit The maximum number of characters in each message in the top-right corner of the main window.\nThe message will be elided if it’s too long.\nHTML Diff Viewer Length Limit The maximum number of characters in the HTML Diff Viewer.\nThe Diff Viewer will fall back to plain text if either of the output or the expected output is too long.\nOpen File Length Limit The maximum number of characters in a source file to open.\nA source file won’t be opened if it’s too long.\nDisplay Test Case Length Limit The maximum number of characters in a test case to be displayed.\nA test case will be elided and read-only if it’s too long.\nNetwork Proxy The proxy server used to check for updates.\n","excerpt":"Update Check for updates on startup When CP Editor starts, checks …","ref":"/docs/preferences/advanced/","title":"Advanced"},{"body":"Update Check for updates on startup When CP Editor starts, checks whether there are new versions of CP Editor.\nIf there are new versions, a pop-up window will ask you whether to update or not.\nUse the beta version When checking for updates, check for beta versions. The beta versions usually have more features and improvements, but they are not as stable as the stable versions.\nLimits Default Time Limit The default time limit when executing programs.\nThe program will be killed if it doesn’t terminate in the time limit.\nOutput Length Limit The maximum number of characters in the output of the program.\nThe program will be killed if either of its stdout or stderr is too long.\nOutput Display Length Limit The maximum number of characters to be displayed for the output of the program.\nIf the output is too long, it will be elided.\nMessage Length Limit The maximum number of characters in each message in the top-right corner of the main window.\nThe message will be elided if it’s too long.\nHTML Diff Viewer Length Limit The maximum number of characters in the HTML Diff Viewer.\nThe Diff Viewer will fall back to plain text if either of the output or the expected output is too long.\nOpen File Length Limit The maximum number of characters in a source file to open.\nA source file won’t be opened if it’s too long.\nDisplay Test Case Length Limit The maximum number of characters in a test case to be displayed.\nA test case will be elided and read-only if it’s too long.\nNetwork Proxy The proxy server used to check for updates.\n","excerpt":"Update Check for updates on startup When CP Editor starts, checks …","ref":"/ru/docs/preferences/advanced/","title":"Advanced"},{"body":"更新 启动时检查更新 在 CP Editor 启动时，检查是否有新版本的 CP Editor。\n如果有新版本，则会弹出一个窗口询问你是否进行更新。\n使用测试版本 检查更新时，检查 Beta 版本。 Beta 版通常具有更多功能和改进，但不如稳定版稳定。\n限制 默认时间限制 执行程序的默认时间限制。\n超时的程序会被终止。\n输出长度限制 程序的最大输出字符数。\nstdout 或 stderr 过长的程序将会被终止。\n输出显示长度限制 会显示出来的程序输出的最大字符数。\n如果输出过长，超长部分会被省略。\n消息长度限制 主窗口右上角内每条信息的最大长度。\n超长部分将会被省略。\nHTML 差异查看器长度限制 HTML 差异查看器中的最大字符数。\n如果输出或答案太长，差异查看器将以纯文本显示。\n打开文件长度限制 允许打开的文件的最大字符数。\n如果文件超长，将不会被打开。\n显示测试用例长度限制 会显示出来的测试用例的最大字符数。\n如果测试用例过长，超长部分会被省略，且测试用例会变得只读。\n网络代理 用于检查更新的代理服务器。\n","excerpt":"更新 启动时检查更新 在 CP Editor 启动时，检查是否有新版本的 CP Editor。\n如果有新版本，则会弹出一个窗口询问你是否进行 …","ref":"/zh/docs/preferences/advanced/","title":"高级"},{"body":"Temporary Directory In CP Editor, each file has a temporary directory, it can be used to save the executable files, etc.\nYou can treat it as a place to safely save something for each tab (i.e. each file) without affecting other files on your disk, and it will be automatically deleted when the tab is closed.\nOn Linux, it’s /tmp/CP Editor-XXXXXX. On Windows, it’s C:\\Users\\\u003cusername\u003e\\AppData\\Local\\Temp\\CP Editor-XXXXXX.\nRegular Expression The regular expression is used to match patterns in a string and find and replace substrings.\nYou can find many online regex cources, for example: https://regexone.com/.\nIn CP Editor, you can use \\1, \\2, etc. for the content of the first/second capture group in the replacement patterns.\n","excerpt":"Temporary Directory In CP Editor, each file has a temporary directory, …","ref":"/docs/preferences/general/","title":"General"},{"body":"Temporary Directory In CP Editor, each file has a temporary directory, it can be used to save the executable files, etc.\nYou can treat it as a place to safely save something for each tab (i.e. each file) without affecting other files on your disk, and it will be automatically deleted when the tab is closed.\nOn Linux, it’s /tmp/CP Editor-XXXXXX. On Windows, it’s C:\\Users\\\u003cusername\u003e\\AppData\\Local\\Temp\\CP Editor-XXXXXX.\nRegular Expression The regular expression is used to match patterns in a string and find and replace substrings.\nYou can find many online regex cources, for example: https://regexone.com/.\nIn CP Editor, you can use \\1, \\2, etc. for the content of the first/second capture group in the replacement patterns.\n","excerpt":"Temporary Directory In CP Editor, each file has a temporary directory, …","ref":"/ru/docs/preferences/general/","title":"General"},{"body":"临时文件夹 在 CP Editor 中，每个文件都有一个临时目录，可用于保存可执行文件等等。\n你可以将其视为一个能够安全地为每个标签页（即每个文件）保存内容而不影响磁盘上其他文件的地方，并且在关闭标签页时它会被自动删除。\n在 Linux 上，它位于 /tmp/CP Editor-XXXXXX。在 Windows 上，它位于 C:\\Users\\\u003cusername\u003e\\AppData\\Local\\Temp\\CP Editor-XXXXXX。\n正则表达式 正则表达式 用于匹配字符串中的模式以及查找和替换子字符串。\n你可以找到许多在线正则表达式课程，例如：正则表达式30分钟入门教程。.\n在 CP Editor 中，你可以使用 \\1, \\2 等用于替换模式中的第一个/第二个捕获组的内容。\n","excerpt":"临时文件夹 在 CP Editor 中，每个文件都有一个临时目录，可用于保存可执行文件等等。\n你可以将其视为一个能够安全地为每个标签页（即每 …","ref":"/zh/docs/preferences/general/","title":"通用"},{"body":"  #td-cover-block-0 { background-image: url(/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_725403_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_725403_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About CP Editor An IDE specially designed for competitive programming        CP Editor is a Qt-based, lightweight and cross-platform IDE specially designed for competitive programming.\nIt’s free software distributed under GPL-3.0. The source code is available on GitHub.\n    You can:\nLearn about the Features Download and have a try Read the Documentation Join the Community      This website is built by Hugo with the Docsy theme.\nThe home page is based on the Colorlib template.\n   ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","title":"About CP Editor"},{"body":"  #td-cover-block-0 { background-image: url(/ru/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_725403_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/ru/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_725403_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  About CP Editor An IDE specially designed for competitive programming        CP Editor is a Qt-based, lightweight and cross-platform IDE specially designed for competitive programming.\nIt’s free software distributed under GPL-3.0. The source code is available on GitHub.\n    You can:\nLearn about the Features Download and have a try Read the Documentation Join the Community      This website is built by Hugo with the Docsy theme.\nThe home page is based on the Colorlib template.\n   ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/ru/about/","title":"About CP Editor"},{"body":"","excerpt":"","ref":"/community/","title":"Community"},{"body":"","excerpt":"","ref":"/ru/community/","title":"Community"},{"body":"","excerpt":"","ref":"/zh/community/","title":"Community"},{"body":"   [v-cloak] { display: none; }  The Missing Editor for Competitive Programmers CP Editor is specially designed for competitive programming. It helps you focus on your algorithms and automates compilation, execution and testing of your code. It even fetches test cases for you from different platforms and submits solutions to Codeforces!\nView source Get for {{ os }} Download          How it works for you CP Editor eliminates all the repetitive and boring tasks during algorithmic contests. It automates all that's reasonably possible and allows you to purely focus on your code.\n  Fetch testcases CP Editor can fetch testcases automatically from almost all competitive programming sites. Say bye to error-prone copy-pasting.\n   Code faster Code faster with its amazing customizable code snippets. In just two seconds you can insert a whole DFS code into your editor.\n   Get verdicts You can get verdicts for your sample testcases in one click by built-in checkers or checkers from testlib. You can also add your own checkers.\n     Run without Saving  Variety of Themes  Code Linting  Submit to Codeforces   Run any code\nAt any time We know that you want to test something without a temp file You can run your code in one click without saving and the hot exit feature makes it easy to restore your code from the last session.\nGet Started Now       Dark themes? We've got you covered Our lives are colorful, why not our coding editor We have added five different themes for you to choose from: Light, Drakula, Monkai, Solarized Light and Solarized Dark. If that does not satisfy you, ask us on our community pages and we will provide you more.\nGet Started Now       Errors and Warnings?\nWe lint them while you are coding Save your precious contest time with code linting Using Language Servers, we provide real-time linting for errors and warnings in your code, just like Intellisense in VSCode and Atom. You can see squiggles under the warnings and hover over them to get tooltips.\nGet Started Now       We can submit your Solutions to Codeforces All thanks to Competitive Programming Community We have gathered the best tools in competitive programming and merged them into one editor. One such tool is called CF Tool. We have added it so you can submit and get verdicts in the editor.\nGet Started Now           Unique Screens that work perfectly  We have made a simple yet powerful UI that shouldn't confuse you when solving problems Everything you need is always in front of your eyes\n   Feedback from Community Our Community support us and keep us alive. We would love to hear your feedback too!\nSee what other Competitive Programmers have to say about our editor\n  I can definitely say this is what I was looking for as a competitive programmer. Light-weight, very simple to use and best part is that compilation is fast, really helpful in competitions.\nSimran Gujrati            Easy to use and lightweight. It's very fast in terms of compiling and also provides the feature to parse testcases from competitive websites. It is the best editor I have ever used.\nYatharth Varma            This is exactly what I was looking for. An Editor that automates all redundant tasks and helps me in focusing on the Algorithm. Give a try, you are gonna love me.\nNitish Kumar Singh                Full support for\nC/C++, Java and Python Use the language you like We officially support three languages in the editor. You can set your own compilation commands and pass runtime arguments to your code. It really gets exciting when you have the opportunity to use different languages in different tabs with one-click options.\nGet Started Now       Impressed by our features? We are excited that you have chosen to try out this editor. We hope that our Editor will fulfill all your needs in Competitive Programming. CP Editor is, \"by competitive programmers, to competitive programmers, for competitive programmers\".\nTry it on {{ os }} Try it now        ","excerpt":"   [v-cloak] { display: none; }  The Missing Editor for Competitive …","ref":"/","title":"CP Editor"},{"body":"   [v-cloak] { display: none; }  The Missing Editor for Competitive Programmers CP Editor is specially designed for competitive programming. It helps you focus on your algorithms and automates compilation, execution and testing of your code. It even fetches test cases for you from different platforms and submits solutions to Codeforces!\nView source Get for {{ os }} Download          How it works for you CP Editor eliminates all the repetitive and boring tasks during algorithmic contests. It automates all that's reasonably possible and allows you to purely focus on your code.\n  Fetch testcases CP Editor can fetch testcases automatically from almost all competitive programming sites. Say bye to error-prone copy-pasting.\n   Code faster Code faster with its amazing customizable code snippets. In just two seconds you can insert a whole DFS code into your editor.\n   Get verdicts You can get verdicts for your sample testcases in one click by built-in checkers or checkers from testlib. You can also add your own checkers.\n     Run without Saving  Variety of Themes  Code Linting  Submit to Codeforces   Run any code\nAt any time We know that you want to test something without a temp file You can run your code in one click without saving and the hot exit feature makes it easy to restore your code from the last session.\nGet Started Now       Dark themes? We've got you covered Our lives are colorful, why not our coding editor We have added five different themes for you to choose from: Light, Drakula, Monkai, Solarized Light and Solarized Dark. If that does not satisfy you, ask us on our community pages and we will provide you more.\nGet Started Now       Errors and Warnings?\nWe lint them while you are coding Save your precious contest time with code linting Using Language Servers, we provide real-time linting for errors and warnings in your code, just like Intellisense in VSCode and Atom. You can see squiggles under the warnings and hover over them to get tooltips.\nGet Started Now       We can submit your Solutions to Codeforces All thanks to Competitive Programming Community We have gathered the best tools in competitive programming and merged them into one editor. One such tool is called CF Tool. We have added it so you can submit and get verdicts in the editor.\nGet Started Now           Unique Screens that work perfectly  We have made a simple yet powerful UI that shouldn't confuse you when solving problems Everything you need is always in front of your eyes\n   Feedback from Community Our Community support us and keep us alive. We would love to hear your feedback too!\nSee what other Competitive Programmers have to say about our editor\n  I can definitely say this is what I was looking for as a competitive programmer. Light-weight, very simple to use and best part is that compilation is fast, really helpful in competitions.\nSimran Gujrati            Easy to use and lightweight. It's very fast in terms of compiling and also provides the feature to parse testcases from competitive websites. It is the best editor I have ever used.\nYatharth Varma            This is exactly what I was looking for. An Editor that automates all redundant tasks and helps me in focusing on the Algorithm. Give a try, you are gonna love me.\nNitish Kumar Singh                Full support for\nC/C++, Java and Python Use the language you like We officially support three languages in the editor. You can set your own compilation commands and pass runtime arguments to your code. It really gets exciting when you have the opportunity to use different languages in different tabs with one-click options.\nGet Started Now       Impressed by our features? We are excited that you have chosen to try out this editor. We hope that our Editor will fulfill all your needs in Competitive Programming. CP Editor is, \"by competitive programmers, to competitive programmers, for competitive programmers\".\nTry it on {{ os }} Try it now        ","excerpt":"   [v-cloak] { display: none; }  The Missing Editor for Competitive …","ref":"/ru/","title":"CP Editor"},{"body":"   [v-cloak] { display: none; }  算法竞赛选手们\n所需要的 IDE CP Editor 专为算法竞赛设计，不像其它 IDE 主要是为了开发设计的。它可以帮助你自动化编译、运行、测试，从而让你专注于算法设计。它甚至可以从各种算法竞赛网站上获取样例，将代码提交到 Codeforces 上！\n查看源代码 为 {{ os }} 下载 下载          它如何为你工作 CP Editor 解决了算法竞赛中重复和无聊的任务。它会尽可能地将操作自动化，让你完全专注于代码。\n  获取测试用例 CP Editor 可以从几乎所有的算法竞赛网站上自动获取样例。你再也不用手动进行麻烦的复制粘贴。\n   更快地编程 强大的可自定义代码片段功能可加快编程速度。在短短两秒钟内，你可以将整个 DFS 代码插入编辑器。\n   获取评测结果 你可以通过内置检查器或来自 testlib 的检查器一键获取样例的评测结果。你也可以添加自己的 SPJ。\n     运行而无需保存  多种主题  代码检查  提交至 Codeforces   在任何时候\n运行任何代码 我们知道你想要无需临时文件就能进行测试 你可以一键运行代码而无需保存，热退出功能使你可以轻松地从上一个会话中还原代码。\n即刻开始       想要暗色模式？\n我们提供了 我们的生活是丰富多彩的，难道代码编辑器就不吗？ 我们提供了五个不同的主题供你选择：Light, Drakula, Monkai, Solarized Light 以及 Solarized Dark。如果你不满意，请告诉我们，我们将为你提供更多。\n即刻开始       错误和警告？\n我们会在你打字的过程中指出 用代码检查节省宝贵的比赛时间  就像 VS Code 和 Atom 中的 Intellisense 那样，使用 Language Server，我们可以为代码中的错误和警告提供实时更新。你可以在警告下方看到波浪线，并将鼠标悬停在它们上方以获取提示。\n即刻开始       我们可以将你的代码提交到 Codeforces 多亏了算法竞赛编程社区 我们收集了算法竞赛编程中最好的工具，并将它们合并为一个 IDE。其中一种这样的工具称为 CF Tool。我们已经添加了它，因此，你可以在 CP Editor 中提交并获取评测结果。\n即刻开始           独特的屏幕，完美地工作  我们已经创建了一个简洁而功能强大的 UI，在解决问题时不会让你感到困惑 你所需的一切始终在你的眼前\n   来自社区的反馈 我们的社区支持我们并让我们保持活力。我们也很想听听你的反馈！\n看看其他算法竞赛选手们对 CP Editor 有什么看法\n  I can definitely say this is what I was looking for as a competitive programmer. Light-weight, very simple to use and best part is that compilation is fast, really helpful in competitions.\nSimran Gujrati            Easy to use and lightweight. It's very fast in terms of compiling and also provides the feature to parse testcases from competitive websites. It is the best editor I have ever used.\nYatharth Varma            This is exactly what I was looking for. An Editor that automates all redundant tasks and helps me in focusing on the Algorithm. Give a try, you are gonna love me.\nNitish Kumar Singh                全面支持\nC/C++, Java 和 Python 使用你喜欢的语言 我们支持三种编程语言。你可以设置自己的编译命令，并将运行时参数传递给代码。令人兴奋的是，你有机会在带有一键式选项的不同选项卡中使用不同的语言。\n即刻开始       被 CP Editor 的强大功能所吸引了？ 很高兴你选择尝试 CP Editor。\n我们希望 CP Editor 能够满足你在算法竞赛编程中的所有需求。\nCP Editor 由算法竞赛选手创建，给算法竞赛选手使用，为算法竞赛选手着想。\n在 {{ os }} 上试试 现在就试试        ","excerpt":"   [v-cloak] { display: none; }  算法竞赛选手们\n所需要的 IDE CP Editor 专为算法竞赛设计，不 …","ref":"/zh/","title":"CP Editor"},{"body":"    [v-cloak] { display: none; }  Get CP Editor on your machine and have a try! You probably want to use the latest stable version on {{ userPlatform }} .    Choose your platform and the version you want to download Install instructions All versions    Loading... No available asset found Platform {{ platformOption }}   Version {{ asset.name }} (Latest Stable) (Latest Beta)      Download     ","excerpt":"    [v-cloak] { display: none; }  Get CP Editor on your machine and …","ref":"/download/","title":"Download CP Editor"},{"body":"    [v-cloak] { display: none; }  Get CP Editor on your machine and have a try! You probably want to use the latest stable version on {{ userPlatform }} .    Choose your platform and the version you want to download Install instructions All versions    Loading... No available asset found Platform {{ platformOption }}   Version {{ asset.name }} (Latest Stable) (Latest Beta)      Download     ","excerpt":"    [v-cloak] { display: none; }  Get CP Editor on your machine and …","ref":"/ru/download/","title":"Download CP Editor"},{"body":"    [v-cloak] { display: none; }  在你的计算机上获取 CP Editor，然后试一试！ 你可能想要使用 在 {{ userPlatform }} 上的最新稳定版本 。    选择你使用的平台和想要下载的版本 安装说明 所有版本    加载中... 找不到可下载的文件 平台 {{ platformOption }}   版本 {{ asset.name }} (最新稳定版) (最新预览版)      下载      ","excerpt":"    [v-cloak] { display: none; }  在你的计算机上获取 CP Editor，然后试一试！ …","ref":"/zh/download/","title":"下载 CP Editor"},{"body":"  #td-cover-block-0 { background-image: url(/zh/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_725403_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/zh/about/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_725403_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  关于 CP Editor 专为算法竞赛而设计的 IDE        CP Editor 是基于 Qt 的轻量级跨平台 IDE，专门为算法竞赛而设计。\n它是以 GPL-3.0 协议发布的自由软件。源代码可以在 GitHub 获取。\n    你可以：\n了解 特性 下载 并尝试一下 阅读 文档 加入 社区      该网站使用 Hugo 以及 Docsy 主题构建。\n主页 基于 Colorlib 模板制作。\n   ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/zh/about/","title":"关于 CP Editor"}]